# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞ HumanOS
–ó–∞–ø—É—Å–∫: python SETUP_BOT.py
"""

import os
import shutil

print("="*60)
print("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞ HumanOS")
print("="*60)

# –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
if os.path.exists('bot.py'):
    if not os.path.exists('bot_old_backup.py'):
        shutil.copy('bot.py', 'bot_old_backup.py')
        print("‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞")

# –ö–æ–¥ –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞ (—á–∞—Å—Ç—å 1 - –∏–º–ø–æ—Ä—Ç—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
code_part1 = """import os
import logging
import asyncio
from datetime import datetime
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from reminder import ReminderSystem
from database import Database

load_dotenv()
db = Database()

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

TOKEN = os.getenv('BOT_TOKEN')
if not TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å —Ñ–∞–π–ª .env")

QUEST_TYPES = {
    "physical": "üí™ –§–∏–∑–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞",
    "intellectual": "üìö –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞",
    "mental": "üß† –ú–µ–Ω—Ç–∞–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞",
    "custom": "üéØ –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞"
}
"""

# –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–∞—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
with open('_part1.txt', 'w', encoding='utf-8') as f:
    f.write(code_part1)

print("üìù –ß–∞—Å—Ç—å 1 —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏ –∏–∑ —Ñ–∞–π–ª–æ–≤ parts
parts = []
for i in range(1, 6):
    filename = f'_part{i}.txt'
    if os.path.exists(filename):
        with open(filename, 'r', encoding='utf-8') as f:
            parts.append(f.read())
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —á–∞—Å—Ç—å {i}")

if len(parts) < 5:
    print("‚ö†Ô∏è –ù–µ –≤—Å–µ —á–∞—Å—Ç–∏ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É—é –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –∫–æ–¥...")
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–ª–Ω—ã–π –∫–æ–¥ –µ—Å–ª–∏ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
    exec(open('_generate_full_bot.py').read())
else:
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —á–∞—Å—Ç–∏
    full_code = ''.join(parts)
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º bot.py
    with open('bot.py', 'w', encoding='utf-8') as f:
        f.write(full_code)
    
    print(f"\n‚úÖ bot.py —Å–æ–∑–¥–∞–Ω ({len(full_code)} —Å–∏–º–≤–æ–ª–æ–≤)")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
    try:
        compile(full_code, 'bot.py', 'exec')
        print("‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω!")
    except SyntaxError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

print("\n"+"="*60)
print("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
print("="*60)
print("\n–ó–∞–ø—É—Å–∫: python bot.py")

# -*- coding: utf-8 -*-
"""
–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞
–ó–∞–ø—É—Å–∫: python apply_update.py
"""

print("–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")

# –ß–∏—Ç–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é main –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ –±–æ—Ç–∞
with open('bot_before_update.py', 'r', encoding='utf-8') as f:
    old = f.read()

# –ù–∞—Ö–æ–¥–∏–º —Ñ—É–Ω–∫—Ü–∏—é button_callback
button_start = old.find('async def button_callback')
if button_start > 0:
    button_code = old[button_start:]
    # –û–±—Ä–µ–∑–∞–µ–º –¥–æ —Ñ—É–Ω–∫—Ü–∏–∏ main
    main_start = button_code.find('def main():')
    if main_start > 0:
        button_code = button_code[:main_start]
        main_code = old[old.find('def main()'):]
    else:
        button_code = ""
        main_code = old[old.find('def main()'):]
else:
    button_code = ""
    main_code = old[old.find('def main()'):]

# –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π button_callback
new_button_callback = '''
async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    data = query.data
    
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if data == "main_menu":
        await handle_main_menu(query, context)
    elif data == "quests_menu":
        await handle_quests_menu(query, context)
    elif data == "create_quest":
        await handle_create_quest(query, context)
    elif data == "my_quests":
        await handle_my_quests(query, context)
    elif data == "stats":
        await handle_stats(query, context)
    elif data == "help":
        await handle_help(query, context)
    elif data == "cancel_creation":
        await handle_cancel_creation(query, context)
    
    # –¢–∏–ø—ã –∫–≤–µ—Å—Ç–æ–≤
    elif data.startswith("type_"):
        await handle_quest_type_selection(query, context)
    
    # –î–µ—Ç–∞–ª–∏ –∫–≤–µ—Å—Ç–∞
    elif data.startswith("quest_") and not data.startswith("quest_type"):
        await handle_quest_detail(query, context)
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    elif data.startswith("progress_"):
        await handle_progress_update(query, context)
    
    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–∞
    elif data.startswith("complete_"):
        await handle_complete_quest(query, context)
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    elif data.startswith("edit_") and not data.startswith("edit_title") and not data.startswith("edit_target") and not data.startswith("edit_deadline") and not data.startswith("edit_comment"):
        await handle_edit_quest(query, context)
    elif data.startswith("edit_title_") or data.startswith("edit_target_") or data.startswith("edit_deadline_") or data.startswith("edit_comment_"):
        await handle_edit_field(query, context)
    
    # –£–¥–∞–ª–µ–Ω–∏–µ
    elif data.startswith("delete_"):
        await handle_delete_quest(query, context)
    elif data.startswith("confirm_delete_"):
        await handle_confirm_delete(query, context)
    
    else:
        await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")


'''

# –ß–∏—Ç–∞–µ–º –Ω–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ bot.py
with open('bot.py', 'r', encoding='utf-8') as f:
    current = f.read()

# –ù–∞—Ö–æ–¥–∏–º –≥–¥–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
handlers_start = current.find('# –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start')

# –ë–µ—Ä–µ–º –≤—Å–µ –¥–æ handle_all_messages
handlers_end = current.find('async def handle_all_messages')

if handlers_start > 0 and handlers_end > 0:
    new_handlers = current[handlers_start:handlers_end]
else:
    print("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏")
    exit(1)

# –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é handle_text_message
new_text_handler = '''
async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    text = update.message.text.strip()
    user_id = update.effective_user.id
    state = context.user_data.get("state")
    
    if not text:
        await update.message.reply_text("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–≤–µ—Å—Ç–∞ - –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è
        if state == "awaiting_title":
            is_valid, error_msg = db.validate_input(text, "–ù–∞–∑–≤–∞–Ω–∏–µ")
            if not is_valid:
                await update.message.reply_text(f"‚ùå {error_msg}\\n\\n–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑")
                return
            
            context.user_data["quest_title"] = text
            quest_type = context.user_data.get("quest_type")
            
            if quest_type in ["mental", "custom"]:
                context.user_data["target_value"] = 100
                context.user_data["state"] = "awaiting_deadline"
                
                text_msg = f"–ù–∞–∑–≤–∞–Ω–∏–µ: {text}\\n\\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω?\\n**–§–æ—Ä–º–∞—Ç—ã:**\\n‚Ä¢ –î–î.–ú–ú.–ì–ì –ß–ß:–ú–ú\\n‚Ä¢ –î–î.–ú–ú.–ì–ì\\n‚Ä¢ '–Ω–µ—Ç' - –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
                await update.message.reply_text(text_msg, parse_mode='Markdown')
            else:
                context.user_data["state"] = "awaiting_target"
                text_msg = f"–ù–∞–∑–≤–∞–Ω–∏–µ: {text}\\n\\n–í–≤–µ–¥–∏ —Ü–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:\\n**–ü—Ä–∏–º–µ—Ä—ã:** 50, 100"
                await update.message.reply_text(text_msg, parse_mode='Markdown')
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–≤–µ—Å—Ç–∞ - –≤–≤–æ–¥ —Ü–µ–ª–µ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
        elif state == "awaiting_target":
            if not text.isdigit():
                await update.message.reply_text("‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ. **–ü—Ä–∏–º–µ—Ä:** 50", parse_mode='Markdown')
                return
            
            target_value = int(text)
            if target_value <= 0:
                await update.message.reply_text("‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
                return
            
            context.user_data["target_value"] = target_value
            context.user_data["state"] = "awaiting_deadline"
            
            text_msg = f"–¶–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {target_value}\\n\\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω?\\n**–§–æ—Ä–º–∞—Ç—ã:**\\n‚Ä¢ –î–î.–ú–ú.–ì–ì –ß–ß:–ú–ú\\n‚Ä¢ –î–î.–ú–ú.–ì–ì\\n‚Ä¢ '–Ω–µ—Ç' - –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
            await update.message.reply_text(text_msg, parse_mode='Markdown')
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–≤–µ—Å—Ç–∞ - –≤–≤–æ–¥ –¥–µ–¥–ª–∞–π–Ω–∞
        elif state == "awaiting_deadline":
            deadline = None
            
            if text.lower() not in ["–Ω–µ—Ç", "no", "skip"]:
                try:
                    text_normalized = text.replace('/', '.').replace('-', '.')
                    
                    if ' ' in text_normalized and ':' in text_normalized:
                        deadline_date = datetime.strptime(text_normalized, "%d.%m.%y %H:%M")
                    else:
                        deadline_date = datetime.strptime(text_normalized, "%d.%m.%y")
                    
                    if deadline_date < datetime.now():
                        await update.message.reply_text("‚ùå –ù–µ–ª—å–∑—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É!")
                        return
                    
                    deadline = deadline_date.strftime("%Y-%m-%d %H:%M:%S")
                except ValueError:
                    await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!\\n\\n**–ò—Å–ø–æ–ª—å–∑—É–π:** –î–î.–ú–ú.–ì–ì –∏–ª–∏ –î–î.–ú–ú.–ì–ì –ß–ß:–ú–ú", parse_mode='Markdown')
                    return
            
            context.user_data["deadline"] = deadline
            context.user_data["state"] = "awaiting_comment"
            
            text_msg = "–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π?\\n\\n**–ü—Ä–∏–º–µ—Ä:** –í–∞–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —É—Ç—Ä–æ–º\\n\\n–ò–ª–∏ –Ω–∞–ø–∏—à–∏ '–Ω–µ—Ç'"
            await update.message.reply_text(text_msg, parse_mode='Markdown')
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–≤–µ—Å—Ç–∞ - –≤–≤–æ–¥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        elif state == "awaiting_comment":
            comment = None
            
            if text.lower() not in ["–Ω–µ—Ç", "no", "skip"]:
                is_valid, error_msg = db.validate_input(text, "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
                if not is_valid:
                    await update.message.reply_text(f"‚ùå {error_msg}")
                    return
                comment = text
            
            quest_title = context.user_data.get("quest_title")
            quest_type = context.user_data.get("quest_type")
            target_value = context.user_data.get("target_value")
            deadline = context.user_data.get("deadline")
            
            quest_id, error = db.create_quest(
                user_id=user_id,
                title=quest_title,
                quest_type=quest_type,
                target_value=target_value,
                deadline=deadline,
                comment=comment
            )
            
            if error:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {error}", reply_markup=get_main_menu_keyboard())
                context.user_data.clear()
                return
            
            context.user_data.clear()
            
            success_text = f"üéâ –ö–≤–µ—Å—Ç **{quest_title}** —Å–æ–∑–¥–∞–Ω!\\n\\n–ù–∞–π–¥–∏ –µ–≥–æ –≤ '–ú–æ–∏ –∫–≤–µ—Å—Ç—ã'"
            await update.message.reply_text(success_text, reply_markup=get_quests_menu_keyboard(), parse_mode='Markdown')
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        elif state == "awaiting_progress":
            if not text.isdigit():
                await update.message.reply_text("‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ")
                return
            
            new_value = int(text)
            quest_id = context.user_data.get("progress_quest_id")
            quest_type = context.user_data.get("quest_type")
            
            if quest_type in ["mental", "custom"]:
                if new_value < 0 or new_value > 100:
                    await update.message.reply_text("‚ùå –ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 100")
                    return
            
            quest = db.update_quest_progress(user_id, quest_id, new_value)
            
            if quest:
                context.user_data.clear()
                await update.message.reply_text("‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±–Ω–æ–≤–ª—ë–Ω!", reply_markup=get_quests_menu_keyboard())
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏")
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–µ–π –∫–≤–µ—Å—Ç–∞
        elif state and state.startswith("editing_"):
            field = state.replace("editing_", "")
            quest_id = context.user_data.get("editing_quest_id")
            
            if field == "title":
                is_valid, error_msg = db.validate_input(text, "–ù–∞–∑–≤–∞–Ω–∏–µ")
                if not is_valid:
                    await update.message.reply_text(f"‚ùå {error_msg}")
                    return
                
                result, error = db.update_quest(user_id, quest_id, title=text)
                if error:
                    await update.message.reply_text(f"‚ùå {error}")
                    return
                
                context.user_data.clear()
                await update.message.reply_text("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=get_quests_menu_keyboard())
            
            elif field == "target":
                if not text.isdigit():
                    await update.message.reply_text("‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ")
                    return
                
                target_value = int(text)
                if target_value <= 0:
                    await update.message.reply_text("‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
                    return
                
                result, error = db.update_quest(user_id, quest_id, target_value=target_value)
                if error:
                    await update.message.reply_text(f"‚ùå {error}")
                    return
                
                context.user_data.clear()
                await update.message.reply_text("‚úÖ –¶–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=get_quests_menu_keyboard())
            
            elif field == "deadline":
                deadline = None
                
                if text.lower() not in ["–Ω–µ—Ç", "no", "skip"]:
                    try:
                        text_normalized = text.replace('/', '.').replace('-', '.')
                        
                        if ' ' in text_normalized and ':' in text_normalized:
                            deadline_date = datetime.strptime(text_normalized, "%d.%m.%y %H:%M")
                        else:
                            deadline_date = datetime.strptime(text_normalized, "%d.%m.%y")
                        
                        if deadline_date < datetime.now():
                            await update.message.reply_text("‚ùå –ù–µ–ª—å–∑—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É!")
                            return
                        
                        deadline = deadline_date.strftime("%Y-%m-%d %H:%M:%S")
                    except ValueError:
                        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!")
                        return
                
                result, error = db.update_quest(user_id, quest_id, deadline=deadline)
                if error:
                    await update.message.reply_text(f"‚ùå {error}")
                    return
                
                context.user_data.clear()
                await update.message.reply_text("‚úÖ –î–µ–¥–ª–∞–π–Ω –æ–±–Ω–æ–≤–ª—ë–Ω!", reply_markup=get_quests_menu_keyboard())
            
            elif field == "comment":
                comment = None if text.lower() in ["–Ω–µ—Ç", "no", "skip"] else text
                
                if comment:
                    is_valid, error_msg = db.validate_input(comment, "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
                    if not is_valid:
                        await update.message.reply_text(f"‚ùå {error_msg}")
                        return
                
                result, error = db.update_quest(user_id, quest_id, comment=comment)
                if error:
                    await update.message.reply_text(f"‚ùå {error}")
                    return
                
                context.user_data.clear()
                await update.message.reply_text("‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–±–Ω–æ–≤–ª—ë–Ω!", reply_markup=get_quests_menu_keyboard())
        
        else:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏", reply_markup=get_main_menu_keyboard())
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_text_message: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_menu_keyboard())
        context.user_data.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∫–Ω–æ–ø–æ–∫

async def handle_main_menu(query, context):
    context.user_data.clear()
    text = "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\\n\\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:"
    await query.edit_message_text(text, reply_markup=get_main_menu_keyboard())


async def handle_quests_menu(query, context):
    context.user_data.clear()
    text = "üìã **–ö–≤–µ—Å—Ç—ã**\\n\\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:"
    await query.edit_message_text(text, reply_markup=get_quests_menu_keyboard(), parse_mode='Markdown')


async def handle_create_quest(query, context):
    context.user_data.clear()
    context.user_data["creating_quest"] = True
    
    text = "–í—ã–±–µ—Ä–∏ —Ç–∏–ø –∫–≤–µ—Å—Ç–∞:\\n\\n"
    text += "üí™ **–§–∏–∑–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞** - —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º\\n"
    text += "üìö **–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞** - —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º\\n"
    text += "üß† **–ú–µ–Ω—Ç–∞–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞** - —Å –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (0-100%)\\n"
    text += "üéØ **–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞** - —Å –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (0-100%)"
    
    await query.edit_message_text(text, reply_markup=get_quest_type_keyboard(), parse_mode='Markdown')


async def handle_quest_type_selection(query, context):
    quest_type = query.data.replace("type_", "")
    context.user_data["quest_type"] = quest_type
    context.user_data["state"] = "awaiting_title"
    
    type_name = QUEST_TYPES.get(quest_type, "–ö–≤–µ—Å—Ç")
    
    text = f"–¢–∏–ø –∫–≤–µ—Å—Ç–∞: {type_name}\\n\\n"
    text += "–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–≤–µ—Å—Ç–∞:\\n\\n"
    text += "**–ü—Ä–∏–º–µ—Ä—ã:**\\n‚Ä¢ –£—Ç—Ä–µ–Ω–Ω—è—è –ø—Ä–æ–±–µ–∂–∫–∞\\n‚Ä¢ –ü—Ä–æ—á–∏—Ç–∞—Ç—å –∫–Ω–∏–≥—É"
    
    await query.edit_message_text(text, reply_markup=get_cancel_keyboard(), parse_mode='Markdown')


async def handle_my_quests(query, context):
    user_id = query.from_user.id
    quests = db.get_user_quests(user_id)
    
    if not quests:
        text = "üìã –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤!\\n\\n–°–æ–∑–¥–∞–π —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –∫–≤–µ—Å—Ç! üí™"
        keyboard = [
            [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –∫–≤–µ—Å—Ç", callback_data="create_quest")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="quests_menu")]
        ]
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
        return
    
    text = "üìã **–¢–≤–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–≤–µ—Å—Ç—ã:**\\n\\n"
    keyboard = []
    
    for quest in quests:
        quest_id = quest[0]
        title = quest[2]
        quest_type = quest[3]
        target_value = quest[4]
        current_value = quest[5]
        
        type_emoji = {"physical": "üí™", "intellectual": "üìö", "mental": "üß†", "custom": "üéØ"}.get(quest_type, "üéØ")
        
        if quest_type in ["physical", "intellectual"]:
            progress = f"{current_value}/{target_value}"
        else:
            progress = f"{current_value}%"
        
        text += f"{type_emoji} {title} - {progress}\\n"
        keyboard.append([InlineKeyboardButton(f"{type_emoji} {title}", callback_data=f"quest_{quest_id}")])
    
    keyboard.append([InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –∫–≤–µ—Å—Ç", callback_data="create_quest")])
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="quests_menu")])
    
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')


async def handle_quest_detail(query, context):
    try:
        quest_id = int(query.data.split("_")[1])
    except:
        await query.answer("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∫–≤–µ—Å—Ç–∞")
        return
    
    user_id = query.from_user.id
    quest = db.get_quest(user_id, quest_id)
    
    if not quest:
        await query.edit_message_text("‚ùå –ö–≤–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É –∫–≤–µ—Å—Ç–æ–≤", callback_data="my_quests")]
        ]))
        return
    
    text = format_quest_text(quest)
    completed = quest[6]
    
    await query.edit_message_text(text, reply_markup=get_quest_detail_keyboard(quest_id, completed), parse_mode='Markdown')


async def handle_progress_update(query, context):
    try:
        quest_id = int(query.data.split("_")[1])
    except:
        await query.answer("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∫–≤–µ—Å—Ç–∞")
        return
    
    user_id = query.from_user.id
    quest = db.get_quest(user_id, quest_id)
    
    if not quest:
        await query.answer("–ö–≤–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    quest_type = quest[3]
    target_value = quest[4]
    current_value = quest[5]
    
    context.user_data["state"] = "awaiting_progress"
    context.user_data["progress_quest_id"] = quest_id
    context.user_data["quest_type"] = quest_type
    
    if quest_type in ["physical", "intellectual"]:
        text = f"–¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {current_value}/{target_value}\\n\\n–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:\\n**–ü—Ä–∏–º–µ—Ä:** 25"
    else:
        text = f"–¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {current_value}%\\n\\n–í–≤–µ–¥–∏ –ø—Ä–æ—Ü–µ–Ω—Ç (0-100):\\n**–ü—Ä–∏–º–µ—Ä:** 75"
    
    keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"quest_{quest_id}")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')


async def handle_complete_quest(query, context):
    try:
        quest_id = int(query.data.split("_")[1])
    except:
        await query.answer("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∫–≤–µ—Å—Ç–∞")
        return
    
    user_id = query.from_user.id
    quest = db.complete_quest(user_id, quest_id)
    
    if quest:
        await query.answer("üéâ –ö–≤–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
        await handle_quest_detail(query, context)
    else:
        await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∫–≤–µ—Å—Ç–∞")


async def handle_edit_quest(query, context):
    try:
        quest_id = int(query.data.split("_")[1])
    except:
        await query.answer("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∫–≤–µ—Å—Ç–∞")
        return
    
    user_id = query.from_user.id
    quest = db.get_quest(user_id, quest_id)
    
    if not quest:
        await query.answer("–ö–≤–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    text = f"‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–≤–µ—Å—Ç–∞**\\n\\n{quest[2]}\\n\\n–ß—Ç–æ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å?"
    await query.edit_message_text(text, reply_markup=get_edit_quest_keyboard(quest_id), parse_mode='Markdown')


async def handle_edit_field(query, context):
    parts = query.data.split("_")
    field = parts[1]
    quest_id = int(parts[2])
    
    user_id = query.from_user.id
    quest = db.get_quest(user_id, quest_id)
    
    if not quest:
        await query.answer("–ö–≤–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    context.user_data["editing_quest_id"] = quest_id
    context.user_data["state"] = f"editing_{field}"
    
    keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"edit_{quest_id}")]]
    
    if field == "title":
        text = "–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–≤–µ—Å—Ç–∞:\\n\\n**–ü—Ä–∏–º–µ—Ä:** –í–µ—á–µ—Ä–Ω—è—è –ø—Ä–æ–±–µ–∂–∫–∞"
    elif field == "target":
        quest_type = quest[3]
        if quest_type in ["physical", "intellectual"]:
            text = "–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ —Ü–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:\\n\\n**–ü—Ä–∏–º–µ—Ä:** 100"
        else:
            await query.answer("–î–ª—è –º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á —Ü–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—Å–µ–≥–¥–∞ 100%")
            return
    elif field == "deadline":
        text = "–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –¥–µ–¥–ª–∞–π–Ω:\\n\\n**–§–æ—Ä–º–∞—Ç—ã:**\\n‚Ä¢ –î–î.–ú–ú.–ì–ì –ß–ß:–ú–ú\\n‚Ä¢ –î–î.–ú–ú.–ì–ì\\n‚Ä¢ '–Ω–µ—Ç' - —É–¥–∞–ª–∏—Ç—å"
    elif field == "comment":
        text = "–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:\\n\\n**–ü—Ä–∏–º–µ—Ä:** –í–∞–∂–Ω–æ –Ω–µ –∑–∞–±—ã—Ç—å!"
    else:
        await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø–æ–ª–µ")
        return
    
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')


async def handle_delete_quest(query, context):
    try:
        quest_id = int(query.data.split("_")[1])
    except:
        await query.answer("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∫–≤–µ—Å—Ç–∞")
        return
    
    user_id = query.from_user.id
    quest = db.get_quest(user_id, quest_id)
    
    if not quest:
        await query.answer("–ö–≤–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    text = f"‚ö†Ô∏è –¢—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å –∫–≤–µ—Å—Ç?\\n\\n**{quest[2]}**\\n\\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!"
    keyboard = [
        [InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{quest_id}")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"quest_{quest_id}")]
    ]
    
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')


async def handle_confirm_delete(query, context):
    try:
        quest_id = int(query.data.split("_")[2])
    except:
        await query.answer("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∫–≤–µ—Å—Ç–∞")
        return
    
    user_id = query.from_user.id
    
    if db.delete_quest(user_id, quest_id):
        await query.answer("üóëÔ∏è –ö–≤–µ—Å—Ç —É–¥–∞–ª—ë–Ω")
        await handle_my_quests(query, context)
    else:
        await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–≤–µ—Å—Ç–∞")


async def handle_stats(query, context):
    text = "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\\n\\n–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üöß"
    keyboard = [[InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')


async def handle_help(query, context):
    text = "‚ùì **–ü–æ–º–æ—â—å**\\n\\n–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üöß"
    keyboard = [[InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')


async def handle_cancel_creation(query, context):
    context.user_data.clear()
    await query.answer("–°–æ–∑–¥–∞–Ω–∏–µ –∫–≤–µ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await handle_quests_menu(query, context)


'''

# –ë–µ—Ä–µ–º –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ (–∏–º–ø–æ—Ä—Ç—ã –∏ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏)
file_start = current[:handlers_start]

# –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—ã–π –Ω–æ–≤—ã–π —Ñ–∞–π–ª
full_new_code = file_start + new_handlers + new_text_handler + new_button_callback + main_code

# –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤—ã–π bot.py
with open('bot.py', 'w', encoding='utf-8') as f:
    f.write(full_new_code)

print("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
print("üìä –†–∞–∑–º–µ—Ä –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞:", len(full_new_code), "—Å–∏–º–≤–æ–ª–æ–≤")
print("\nüöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: python bot.py")

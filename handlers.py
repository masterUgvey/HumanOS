"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ callback-–∫–Ω–æ–ø–æ–∫ –¥–ª—è Telegram-–±–æ—Ç–∞
–°–æ–¥–µ—Ä–∂–∏—Ç –≤—Å—é –ª–æ–≥–∏–∫—É –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
"""

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import (
    Message,
    CallbackQuery,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime
from datetime_utils import (
    today_deadline_str,
    normalize_user_deadline_input,
    comment_should_be_saved,
    format_deadline_for_display,
)
from loguru import logger

from database_async import db
from ai_client import ai_client
from config import config

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
router = Router()


# FSM States –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –¥–∏–∞–ª–æ–≥–∞
class QuestCreation(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–≤–µ—Å—Ç–∞"""
    waiting_for_type = State()
    waiting_for_title = State()
    waiting_for_target = State()
    waiting_for_reps = State()
    waiting_for_sets = State()
    waiting_for_pages = State()
    waiting_for_minutes = State()
    waiting_for_progress = State()
    waiting_for_deadline = State()
    waiting_for_comment = State()


class QuestEdit(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–≤–µ—Å—Ç–∞"""
    waiting_for_title = State()
    waiting_for_target = State()
    waiting_for_deadline = State()
    waiting_for_comment = State()


class QuestProgress(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    waiting_for_value = State()


class AIQuest(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–≤–µ—Å—Ç–∞ —á–µ—Ä–µ–∑ AI"""
    waiting_for_goal = State()


# ============= –ö–õ–ê–í–ò–ê–¢–£–†–´ =============

def get_main_menu_keyboard() -> ReplyKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (ReplyKeyboard)"""
    keyboard = [
        [KeyboardButton(text="üìã –ú–æ–∏ –∫–≤–µ—Å—Ç—ã"), KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
        [KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å"), KeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –∫–≤–µ—Å—Ç")],
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True, one_time_keyboard=False)


def get_quests_menu_keyboard() -> ReplyKeyboardMarkup:
    """–ú–µ–Ω—é –∫–≤–µ—Å—Ç–æ–≤ (ReplyKeyboard)"""
    keyboard = [
        [KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∫–≤–µ—Å—Ç–æ–≤")],
        [KeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –∫–≤–µ—Å—Ç")],
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")],
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True, one_time_keyboard=False)


def get_quest_type_keyboard() -> ReplyKeyboardMarkup:
    """–ú–µ–Ω—é —Å–æ–∑–¥–∞–Ω–∏—è –∫–≤–µ—Å—Ç–∞ (ReplyKeyboard)"""
    keyboard = [
        [KeyboardButton(text="üí™ –§–∏–∑–∏—á–µ—Å–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"), KeyboardButton(text="üìö –ß—Ç–µ–Ω–∏–µ")],
        [KeyboardButton(text="üß† –ú–µ–¥–∏—Ç–∞—Ü–∏—è"), KeyboardButton(text="üéØ –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –∫–≤–µ—Å—Ç")],
        [KeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞")],
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True, one_time_keyboard=False)


def get_quest_detail_keyboard(quest_id: int, completed: bool, quest_type: str) -> InlineKeyboardMarkup:
    keyboard = []
    if not completed:
        keyboard.append([InlineKeyboardButton(text="üìà –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data=f"progress_{quest_id}")])
        keyboard.append([InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"complete_{quest_id}")])
    keyboard.append([InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{quest_id}")])
    if quest_type == "mental":
        keyboard.append([InlineKeyboardButton(text="‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –º–µ–¥–∏—Ç–∞—Ü–∏—é", callback_data=f"meditate_{quest_id}")])
    keyboard.append([InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É", callback_data="my_quests_inline")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def format_quest_text(quest: tuple) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∫–≤–µ—Å—Ç–∞"""
    quest_id, user_id, title, quest_type, target_value, current_value, completed, deadline, comment, created_at = quest
    
    type_emoji = {"physical": "üí™", "intellectual": "üìö", "mental": "üß†", "custom": "üéØ"}.get(quest_type, "üéØ")
    
    if quest_type in ["physical", "intellectual", "mental"]:
        progress_text = f"{current_value}/{target_value}"
    else:
        progress_text = f"{current_value}%"
    
    status = "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω" if completed else "‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ"
    
    text = f"{type_emoji} <b>{title}</b>\nID: {quest_id}\n\n"
    text += f"–¢–∏–ø: {config.QUEST_TYPES.get(quest_type, quest_type)}\n"
    text += f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_text}\n"
    text += f"–°—Ç–∞—Ç—É—Å: {status}\n"
    
    text += f"üìÖ –î–µ–¥–ª–∞–π–Ω: {format_deadline_for_display(deadline)}\n"
    
    if comment and comment_should_be_saved(str(comment), deadline):
        text += f"\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}\n"
    
    return text


# ============= –ö–û–ú–ê–ù–î–´ =============

@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await state.clear()
    user = message.from_user
    await db.add_user(user.id, user.first_name or user.username or "User")
    
    welcome_text = f"""
–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üöÄ

–Ø ‚Äî —Ç–≤–æ–π –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –Ω–∞ –ø—É—Ç–∏ –∫ –°–≤–µ—Ä—Ö—á–µ–ª–æ–≤–µ–∫—É. 
–í–º–µ—Å—Ç–µ –º—ã –ø—Ä–µ–≤—Ä–∞—Ç–∏–º —Ä—É—Ç–∏–Ω—É –≤ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—É—é –∏–≥—Ä—É!

–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:
    """
    
    await message.answer(welcome_text, reply_markup=get_main_menu_keyboard())
    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.first_name}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")


@router.message(Command("help"))
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
<b>üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/add_task - –ë—ã—Å—Ç—Ä–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É
/quest - –°–æ–∑–¥–∞—Ç—å –∫–≤–µ—Å—Ç —á–µ—Ä–µ–∑ AI
/progress - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å

<b>üéØ –¢–∏–ø—ã –∫–≤–µ—Å—Ç–æ–≤:</b>
üí™ –§–∏–∑–∏—á–µ—Å–∫–∏–µ - —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
üìö –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ - —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
üß† –ú–µ–Ω—Ç–∞–ª—å–Ω—ã–µ - —Å –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
üéØ –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–µ - —Å –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

<b>ü§ñ AI –§—É–Ω–∫—Ü–∏–∏:</b>
–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /quest –∏–ª–∏ –∫–Ω–æ–ø–∫—É "AI –ö–≤–µ—Å—Ç" –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–≤–µ—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–≤–æ–µ–π —Ü–µ–ª–∏!
    """
    await message.answer(help_text, parse_mode="HTML")


@router.message(Command("sanitize"))
async def cmd_sanitize(message: Message):
    """–ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–∞: –ø—Ä–∏–≤–µ—Å—Ç–∏ –ë–î –≤ –ø–æ—Ä—è–¥–æ–∫ (—á–∏—Å—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ–¥–ª–∞–π–Ω–æ–≤)"""
    user_id = message.from_user.id
    logger.info(f"[SANITIZE] requested by {user_id}")
    await message.answer("üßπ –ó–∞–ø—É—Å–∫–∞—é —á–∏—Å—Ç–∫—É –ë–î... —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥")
    try:
        await db.sanitize_existing_data()
        await message.answer("‚úÖ –ß–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å –∫–≤–µ—Å—Ç—ã.")
    except Exception as e:
        logger.error(f"[SANITIZE] failed: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á–∏—Å—Ç–∫–µ –ë–î")


@router.message(Command("add_task"))
async def cmd_add_task(message: Message, state: FSMContext):
    """–ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
    await state.set_state(QuestCreation.waiting_for_type)
    text = "–í—ã–±–µ—Ä–∏ —Ç–∏–ø –∫–≤–µ—Å—Ç–∞:"
    await message.answer(text, reply_markup=get_quest_type_keyboard())


@router.message(Command("quest"))
async def cmd_quest(message: Message, state: FSMContext):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–≤–µ—Å—Ç–∞ —á–µ—Ä–µ–∑ AI"""
    if not config.WINDSURF_API_KEY:
        await message.answer("‚ö†Ô∏è AI —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ WINDSURF_API_KEY –≤ .env —Ñ–∞–π–ª–µ.")
        return
    
    await state.set_state(AIQuest.waiting_for_goal)
    text = """
ü§ñ <b>AI –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ö–≤–µ—Å—Ç–æ–≤</b>

–û–ø–∏—à–∏ —Å–≤–æ—é —Ü–µ–ª—å, –∏ —è —Å–æ–∑–¥–∞–º –¥–ª—è —Ç–µ–±—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–≤–µ—Å—Ç!

<b>–ü—Ä–∏–º–µ—Ä—ã:</b>
‚Ä¢ –•–æ—á—É –ø–æ—Ö—É–¥–µ—Ç—å –Ω–∞ 5 –∫–≥
‚Ä¢ –ù–∞—É—á–∏—Ç—å—Å—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ Python
‚Ä¢ –ß–∏—Ç–∞—Ç—å –ø–æ –∫–Ω–∏–≥–µ –≤ –Ω–µ–¥–µ–ª—é
‚Ä¢ –ë–µ–≥–∞—Ç—å –∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ

–ù–∞–ø–∏—à–∏ —Å–≤–æ—é —Ü–µ–ª—å:
    """
    await message.answer(text, parse_mode="HTML")


@router.message(Command("progress"))
async def cmd_progress(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∫–≤–µ—Å—Ç–∞–º"""
    user_id = message.from_user.id
    quests = await db.get_user_quests(user_id)
    
    if not quests:
        await message.answer("üìã –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤!")
        return
    
    text = "<b>üìä –¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å:</b>\n\n"
    for quest in quests:
        quest_type = quest[3]
        title = quest[2]
        current = quest[5]
        target = quest[4]
        
        type_emoji = {"physical": "üí™", "intellectual": "üìö", "mental": "üß†", "custom": "üéØ"}.get(quest_type, "üéØ")
        
        if quest_type in ["physical", "intellectual"]:
            progress_text = f"{current}/{target}"
            percent = (current / target * 100) if target > 0 else 0
        else:
            progress_text = f"{current}%"
            percent = current
        
        bar_length = 10
        filled = int(bar_length * percent / 100)
        bar = "‚ñà" * filled + "‚ñë" * (bar_length - filled)
        
        text += f"{type_emoji} {title}\n"
        text += f"[{bar}] {progress_text} ({percent:.0f}%)\n\n"
    
    await message.answer(text, parse_mode="HTML")


# ============= CALLBACK HANDLERS =============

@router.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def go_back_to_main(message: Message, state: FSMContext):
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞–∑–∞–¥"""
    cur = await state.get_state()
    if cur in {
        QuestCreation.waiting_for_type.state,
        QuestCreation.waiting_for_title.state,
        QuestCreation.waiting_for_target.state,
        QuestCreation.waiting_for_reps.state,
        QuestCreation.waiting_for_sets.state,
        QuestCreation.waiting_for_pages.state,
        QuestCreation.waiting_for_minutes.state,
        QuestCreation.waiting_for_progress.state,
        QuestCreation.waiting_for_deadline.state,
        QuestCreation.waiting_for_comment.state,
        QuestEdit.waiting_for_title.state,
        QuestEdit.waiting_for_target.state,
        QuestEdit.waiting_for_deadline.state,
        QuestEdit.waiting_for_comment.state,
        QuestProgress.waiting_for_value.state,
    }:
        await state.clear()
        await message.answer("üìã –ö–≤–µ—Å—Ç—ã\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_quests_menu_keyboard())
    else:
        await state.clear()
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu_keyboard())


@router.message(F.text == "üìã –ú–æ–∏ –∫–≤–µ—Å—Ç—ã")
async def menu_my_quests(message: Message, state: FSMContext):
    """–°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º inline-—Å–ø–∏—Å–æ–∫ –∫–≤–µ—Å—Ç–æ–≤ –±–µ–∑ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ –º–µ–Ω—é"""
    await state.clear()
    user_id = message.from_user.id
    quests = await db.get_user_quests(user_id)
    if not quests:
        await message.answer("üìã –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤!")
        return
    keyboard = []
    now = datetime.now()
    for quest in quests:
        quest_id = quest[0]
        title = quest[2]
        quest_type = quest[3]
        deadline = quest[7]
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ –¥–µ–¥–ª–∞–π–Ω—É
        status_emoji = "‚ö™"
        if deadline:
            try:
                d = datetime.strptime(deadline, "%Y-%m-%d %H:%M:%S")
                # –ï—Å–ª–∏ –≤—Ä–µ–º—è 00:00, —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ 23:00 —ç—Ç–æ–≥–æ –¥–Ω—è
                if d.hour == 0 and d.minute == 0:
                    d = d.replace(hour=23, minute=0)
                if now > d:
                    status_emoji = "üî¥"
                else:
                    seconds_left = (d - now).total_seconds()
                    if seconds_left <= 3600:
                        status_emoji = "üü°"
            except Exception:
                pass
        type_emoji = {"physical": "üí™", "intellectual": "üìö", "mental": "üß†", "custom": "üéØ"}.get(quest_type, "üéØ")
        keyboard.append([InlineKeyboardButton(text=f"{status_emoji} {type_emoji} {title}", callback_data=f"quest_{quest_id}")])
    await message.answer("üìã –í—ã–±–µ—Ä–∏ –∫–≤–µ—Å—Ç:", reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))


@router.message(F.text == "‚ûï –°–æ–∑–¥–∞—Ç—å –∫–≤–µ—Å—Ç")
async def menu_create_quest(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–≤–µ—Å—Ç–∞ (–≤—ã–±–æ—Ä —Ç–∏–ø–∞)"""
    await state.set_state(QuestCreation.waiting_for_type)
    await message.answer("–í—ã–±–µ—Ä–∏ —Ç–∏–ø –∫–≤–µ—Å—Ç–∞:", reply_markup=get_quest_type_keyboard())


@router.message(F.text.in_( [
    "üí™ –§–∏–∑–∏—á–µ—Å–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è",
    "üìö –ß—Ç–µ–Ω–∏–µ",
    "üß† –ú–µ–¥–∏—Ç–∞—Ü–∏—è",
    "üéØ –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –∫–≤–µ—Å—Ç",
]))
async def select_quest_type(message: Message, state: FSMContext):
    mapping = {
        "üí™ –§–∏–∑–∏—á–µ—Å–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è": "physical",
        "üìö –ß—Ç–µ–Ω–∏–µ": "intellectual",
        "üß† –ú–µ–¥–∏—Ç–∞—Ü–∏—è": "mental",
        "üéØ –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –∫–≤–µ—Å—Ç": "custom",
    }
    quest_type = mapping.get(message.text)
    await state.update_data(quest_type=quest_type)
    await state.set_state(QuestCreation.waiting_for_title)
    type_name = config.QUEST_TYPES.get(quest_type, "–ö–≤–µ—Å—Ç")
    await message.answer(f"–¢–∏–ø –∫–≤–µ—Å—Ç–∞: {type_name}\n\n–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–≤–µ—Å—Ç–∞:", reply_markup=ReplyKeyboardRemove())


@router.message(QuestCreation.waiting_for_title)
async def process_quest_title(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–≤–µ—Å—Ç–∞"""
    title = message.text.strip()
    
    is_valid, error_msg = db.validate_input(title, "–ù–∞–∑–≤–∞–Ω–∏–µ")
    if not is_valid:
        await message.answer(f"‚ùå {error_msg}\n\n–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:")
        return
    
    data = await state.get_data()
    quest_type = data.get("quest_type")
    
    await state.update_data(title=title)
    
    if quest_type == "physical":
        await state.set_state(QuestCreation.waiting_for_reps)
        text = f"–ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n\n–í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –≤ –æ–¥–Ω–æ–º –ø–æ–¥—Ö–æ–¥–µ (—á–∏—Å–ª–æ):"
    elif quest_type == "intellectual":
        await state.set_state(QuestCreation.waiting_for_pages)
        text = f"–ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n\n–í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü (—á–∏—Å–ª–æ):"
    elif quest_type == "mental":
        await state.set_state(QuestCreation.waiting_for_minutes)
        text = f"–ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n\n–°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –º–µ–¥–∏—Ç–∞—Ü–∏–∏? (—á–∏—Å–ª–æ):"
    elif quest_type == "custom":
        await state.set_state(QuestCreation.waiting_for_progress)
        text = f"–ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n\n–£ –∫–≤–µ—Å—Ç–∞ –µ—Å—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å?"
        keyboard = [[
            InlineKeyboardButton(text="–î–∞", callback_data="custom_progress_yes"),
            InlineKeyboardButton(text="–ù–µ—Ç", callback_data="custom_progress_no")
        ]]
        await message.answer(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))
        return
    
    await message.answer(text, reply_markup=ReplyKeyboardRemove())

@router.message(QuestCreation.waiting_for_reps)
async def process_reps(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ")
        return
    reps = int(message.text)
    if reps <= 0:
        await message.answer("‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
        return
    await state.update_data(reps=reps)
    await state.set_state(QuestCreation.waiting_for_sets)
    await message.answer("–í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ö–æ–¥–æ–≤ (—á–∏—Å–ª–æ):")

@router.message(QuestCreation.waiting_for_sets)
async def process_sets(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ")
        return
    sets = int(message.text)
    if sets <= 0:
        await message.answer("‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
        return
    data = await state.get_data()
    reps = data.get("reps", 0)
    target_value = reps * sets
    await state.update_data(target_value=target_value)
    await state.set_state(QuestCreation.waiting_for_deadline)
    keyboard = [[
        InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_deadline"),
        InlineKeyboardButton(text="–°–µ–≥–æ–¥–Ω—è", callback_data="set_deadline_today")
    ]]
    await message.answer(
        "–£–∫–∞–∂–∏ –¥–µ–¥–ª–∞–π–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –î–î.–ú–ú.–ì–ì –∏–ª–∏ –î–î.–ú–ú.–ì–ì –ß–ß:–ú–ú",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

@router.message(QuestCreation.waiting_for_pages)
async def process_pages(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ")
        return
    pages = int(message.text)
    if pages <= 0:
        await message.answer("‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
        return
    await state.update_data(target_value=pages)
    await state.set_state(QuestCreation.waiting_for_deadline)
    keyboard = [[
        InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_deadline"),
        InlineKeyboardButton(text="–°–µ–≥–æ–¥–Ω—è", callback_data="set_deadline_today")
    ]]
    await message.answer(
        "–£–∫–∞–∂–∏ –¥–µ–¥–ª–∞–π–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –î–î.–ú–ú.–ì–ì –∏–ª–∏ –î–î.–ú–ú.–ì–ì –ß–ß:–ú–ú",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

@router.message(QuestCreation.waiting_for_minutes)
async def process_minutes(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ")
        return
    minutes = int(message.text)
    if minutes <= 0:
        await message.answer("‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
        return
    await state.update_data(target_value=minutes)
    await state.set_state(QuestCreation.waiting_for_deadline)
    keyboard = [[
        InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_deadline"),
        InlineKeyboardButton(text="–°–µ–≥–æ–¥–Ω—è", callback_data="set_deadline_today")
    ]]
    await message.answer(
        "–£–∫–∞–∂–∏ –¥–µ–¥–ª–∞–π–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –î–î.–ú–ú.–ì–ì –∏–ª–∏ –î–î.–ú–ú.–ì–ì –ß–ß:–ú–ú",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

@router.callback_query(F.data.in_(["custom_progress_yes", "custom_progress_no"]))
async def cb_custom_progress(callback: CallbackQuery, state: FSMContext):
    done = callback.data.endswith("yes")
    await state.update_data(target_value=1, custom_initial_done=done)
    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –¥–µ–¥–ª–∞–π–Ω—É: –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è + –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å
    await state.set_state(QuestCreation.waiting_for_deadline)
    keyboard = [[
        InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_deadline"),
        InlineKeyboardButton(text="–°–µ–≥–æ–¥–Ω—è", callback_data="set_deadline_today")
    ]]
    await callback.message.edit_text(
        "–£–∫–∞–∂–∏ –¥–µ–¥–ª–∞–π–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –î–î.–ú–ú.–ì–ì –∏–ª–∏ –î–î.–ú–ú.–ì–ì –ß–ß:–ú–ú",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await callback.answer()


@router.message(QuestCreation.waiting_for_target)
async def process_quest_target(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–ª–µ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è"""
    if not message.text.isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ!")
        return
    
    target_value = int(message.text)
    if target_value <= 0:
        await message.answer("‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!")
        return
    
    await state.update_data(target_value=target_value)
    await state.set_state(QuestCreation.waiting_for_deadline)
    keyboard = [[InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_deadline")]]
    await message.answer(
        "–£–∫–∞–∂–∏ –¥–µ–¥–ª–∞–π–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –î–î.–ú–ú.–ì–ì –∏–ª–∏ –î–î.–ú–ú.–ì–ì –ß–ß:–ú–ú",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )


@router.callback_query(F.data == "skip_deadline")
async def cb_skip_deadline(callback: CallbackQuery, state: FSMContext):
    await state.update_data(deadline=None)
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é: —Ç–µ–∫—Å—Ç + –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å
    await state.set_state(QuestCreation.waiting_for_comment)
    data = await state.get_data()
    logger.info(f"[CREATE] skip_deadline by {callback.from_user.id} -> state: {data}")
    keyboard = [[InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_comment")]]
    await callback.message.edit_text(
        "–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ–º)",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await callback.answer()

@router.callback_query(F.data == "set_deadline_today")
async def cb_set_deadline_today(callback: CallbackQuery, state: FSMContext):
    # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é –ª–æ–∫–∞–ª—å–Ω—É—é –¥–∞—Ç—É –∫–∞–∫ 00:00:00 (YYYY-MM-DD 00:00:00) –∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é
    today_str = today_deadline_str()
    await state.update_data(deadline=today_str)
    data = await state.get_data()
    logger.info(f"[CREATE] set_deadline_today by {callback.from_user.id} -> deadline: {today_str}, state: {data}")
    await state.set_state(QuestCreation.waiting_for_comment)
    keyboard = [[InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_comment")]]
    await callback.message.edit_text(
        "–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ–º)",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await callback.answer()

@router.message(QuestCreation.waiting_for_deadline)
async def process_quest_deadline(message: Message, state: FSMContext):
    """–í–≤–æ–¥ –¥–∞—Ç—ã –¥–µ–¥–ª–∞–π–Ω–∞ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –î–∞"""
    text = message.text.strip()
    try:
        deadline = normalize_user_deadline_input(text)
        logger.info(f"[CREATE] parse_deadline by {message.from_user.id} -> input: '{text}', normalized: '{deadline}'")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!\n–ò—Å–ø–æ–ª—å–∑—É–π: –î–î.–ú–ú.–ì–ì –∏–ª–∏ –î–î.–ú–ú.–ì–ì –ß–ß:–ú–ú")
        return
    await state.update_data(deadline=deadline)
    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é: —Ç–µ–∫—Å—Ç + –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å
    keyboard = [[InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_comment")]]
    await state.set_state(QuestCreation.waiting_for_comment)
    await message.answer(
        "–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ–º)",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )


@router.callback_query(F.data == "skip_comment")
async def cb_skip_comment(callback: CallbackQuery, state: FSMContext):
    # –°–æ–∑–¥–∞–µ–º –∫–≤–µ—Å—Ç –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    user = callback.from_user
    await db.add_user(user.id, user.first_name or user.username or "User")
    data = await state.get_data()
    logger.info(f"[CREATE] skip_comment by {user.id} -> creating with: title='{data.get('title')}', quest_type='{data.get('quest_type')}', target='{data.get('target_value')}', deadline='{data.get('deadline')}', comment=None")
    quest_id, error = await db.create_quest(
        user_id=user.id,
        title=data["title"],
        quest_type=data["quest_type"],
        target_value=data["target_value"],
        deadline=data.get("deadline"),
        comment=None
    )
    if error:
        await state.clear()
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {error}")
    else:
        if data.get("quest_type") == "custom" and data.get("custom_initial_done") and quest_id:
            await db.update_quest_progress(user.id, quest_id, 1)
        await state.clear()
        # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–≤–µ—Å—Ç–æ–≤ (inline) –±–µ–∑ –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è
        quests = await db.get_user_quests(user.id)
        if not quests:
            await callback.message.edit_text("üìã –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤!")
        else:
            keyboard = []
            now = datetime.now()
            for q in quests:
                q_id = q[0]
                q_title = q[2]
                q_type = q[3]
                q_deadline = q[7]
                status_emoji = "‚ö™"
                if q_deadline:
                    try:
                        d = datetime.strptime(q_deadline, "%Y-%m-%d %H:%M:%S")
                        if d.hour == 0 and d.minute == 0:
                            d = d.replace(hour=23, minute=0)
                        if now > d:
                            status_emoji = "üî¥"
                        else:
                            if (d - now).total_seconds() <= 3600:
                                status_emoji = "üü°"
                    except Exception:
                        pass
                type_emoji = {"physical": "üí™", "intellectual": "üìö", "mental": "üß†", "custom": "üéØ"}.get(q_type, "üéØ")
                keyboard.append([InlineKeyboardButton(text=f"{status_emoji} {type_emoji} {q_title}", callback_data=f"quest_{q_id}")])
            await callback.message.edit_text("üìã –í—ã–±–µ—Ä–∏ –∫–≤–µ—Å—Ç:", reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))
    await callback.answer()

@router.message(QuestCreation.waiting_for_comment)
async def process_quest_comment(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è (—Ç–µ–∫—Å—Ç) –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–≤–µ—Å—Ç–∞"""
    text = message.text.strip()
    data = await state.get_data()
    deadline_in_state = data.get("deadline")
    comment = text if comment_should_be_saved(text, deadline_in_state) else None
    if comment:
        is_valid, error_msg = db.validate_input(comment, "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
        if not is_valid:
            await message.answer(f"‚ùå {error_msg}")
            return
    logger.info(f"[CREATE] comment by {message.from_user.id} -> raw='{text}', saved='{comment}', deadline_in_state='{deadline_in_state}'")
    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î
    await db.add_user(message.from_user.id, message.from_user.first_name or message.from_user.username or "User")

    quest_id, error = await db.create_quest(
        user_id=message.from_user.id,
        title=data["title"],
        quest_type=data["quest_type"],
        target_value=data["target_value"],
        deadline=data.get("deadline"),
        comment=comment
    )
    logger.info(f"[CREATE] create_quest requested by {message.from_user.id} -> title='{data.get('title')}', type='{data.get('quest_type')}', target='{data.get('target_value')}', deadline='{data.get('deadline')}', comment='{comment}', result_id='{quest_id}', error='{error}'")
    
    if error:
        await state.clear()
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞: {error}",
            reply_markup=get_quests_menu_keyboard()
        )
        return
    else:
        if data.get("quest_type") == "custom" and data.get("custom_initial_done") and quest_id:
            await db.update_quest_progress(message.from_user.id, quest_id, 1)
        await state.clear()
        # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–≤–µ—Å—Ç–æ–≤ (inline)
        user_id = message.from_user.id
        quests = await db.get_user_quests(user_id)
        if not quests:
            await message.answer("üìã –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤!")
        else:
            keyboard = []
            now = datetime.now()
            for q in quests:
                q_id = q[0]
                q_title = q[2]
                q_type = q[3]
                q_deadline = q[7]
                status_emoji = "‚ö™"
                if q_deadline:
                    try:
                        d = datetime.strptime(q_deadline, "%Y-%m-%d %H:%M:%S")
                        if d.hour == 0 and d.minute == 0:
                            d = d.replace(hour=23, minute=0)
                        if now > d:
                            status_emoji = "üî¥"
                        else:
                            if (d - now).total_seconds() <= 3600:
                                status_emoji = "üü°"
                    except Exception:
                        pass
                type_emoji = {"physical": "üí™", "intellectual": "üìö", "mental": "üß†", "custom": "üéØ"}.get(q_type, "üéØ")
                keyboard.append([InlineKeyboardButton(text=f"{status_emoji} {type_emoji} {q_title}", callback_data=f"quest_{q_id}")])
            await message.answer("üìã –í—ã–±–µ—Ä–∏ –∫–≤–µ—Å—Ç:", reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))


@router.message(F.text == "üìã –°–ø–∏—Å–æ–∫ –∫–≤–µ—Å—Ç–æ–≤")
async def show_my_quests(message: Message):
    """–°–ø–∏—Å–æ–∫ –∫–≤–µ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏)"""
    user_id = message.from_user.id
    quests = await db.get_user_quests(user_id)
    if not quests:
        await message.answer("üìã –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤!")
        return
    keyboard = []
    now = datetime.now()
    for quest in quests:
        quest_id = quest[0]
        title = quest[2]
        quest_type = quest[3]
        deadline = quest[7]
        status_emoji = "‚ö™"
        if deadline:
            try:
                d = datetime.strptime(deadline, "%Y-%m-%d %H:%M:%S")
                if d.hour == 0 and d.minute == 0:
                    d = d.replace(hour=23, minute=0)
                if now > d:
                    status_emoji = "üî¥"
                else:
                    if (d - now).total_seconds() <= 3600:
                        status_emoji = "üü°"
            except Exception:
                pass
        type_emoji = {"physical": "üí™", "intellectual": "üìö", "mental": "üß†", "custom": "üéØ"}.get(quest_type, "üéØ")
        keyboard.append([InlineKeyboardButton(text=f"{status_emoji} {type_emoji} {title}", callback_data=f"quest_{quest_id}")])
    await message.answer("üìã –í—ã–±–µ—Ä–∏ –∫–≤–µ—Å—Ç:", reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))


class QuestAction(StatesGroup):
    selecting_for_complete = State()
    selecting_for_detail = State()

@router.callback_query(F.data == "my_quests_inline")
async def cb_my_quests(callback: CallbackQuery):
    user_id = callback.from_user.id
    quests = await db.get_user_quests(user_id)
    if not quests:
        keyboard = [[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
        await callback.message.edit_text("üìã –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤!", reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))
        await callback.answer()
        return
    keyboard = []
    now = datetime.now()
    for quest in quests:
        quest_id = quest[0]
        title = quest[2]
        quest_type = quest[3]
        deadline = quest[7]
        status_emoji = "‚ö™"
        if deadline:
            try:
                d = datetime.strptime(deadline, "%Y-%m-%d %H:%M:%S")
                if d.hour == 0 and d.minute == 0:
                    d = d.replace(hour=23, minute=0)
                if now > d:
                    status_emoji = "üî¥"
                else:
                    if (d - now).total_seconds() <= 3600:
                        status_emoji = "üü°"
            except Exception:
                pass
        type_emoji = {"physical": "üí™", "intellectual": "üìö", "mental": "üß†", "custom": "üéØ"}.get(quest_type, "üéØ")
        keyboard.append([InlineKeyboardButton(text=f"{status_emoji} {type_emoji} {title}", callback_data=f"quest_{quest_id}")])
    await callback.message.edit_text("üìã –í—ã–±–µ—Ä–∏ –∫–≤–µ—Å—Ç:", reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))
    await callback.answer()

@router.callback_query(F.data.startswith("quest_"))
async def cb_quest_detail(callback: CallbackQuery):
    try:
        quest_id = int(callback.data.split("_")[1])
    except Exception:
        await callback.answer("–û—à–∏–±–∫–∞ ID")
        return
    user_id = callback.from_user.id
    quest = await db.get_quest(user_id, quest_id)
    if not quest:
        await callback.answer("–ö–≤–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    logger.info(f"[DETAIL] open quest_id={quest_id} data={quest}")
    text = format_quest_text(quest)
    completed = bool(quest[6])
    quest_type = quest[3]
    await callback.message.edit_text(text, reply_markup=get_quest_detail_keyboard(quest_id, completed, quest_type), parse_mode="HTML")
    await callback.answer()

@router.callback_query(F.data.startswith("progress_"))
async def cb_progress(callback: CallbackQuery, state: FSMContext):
    try:
        quest_id = int(callback.data.split("_")[1])
    except Exception:
        await callback.answer("–û—à–∏–±–∫–∞ ID")
        return
    user_id = callback.from_user.id
    quest = await db.get_quest(user_id, quest_id)
    if not quest:
        await callback.answer("–ö–≤–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    quest_type = quest[3]
    target_value = quest[4]
    current_value = quest[5]
    await state.set_state(QuestProgress.waiting_for_value)
    await state.update_data(progress_quest_id=quest_id, quest_type=quest_type)
    if quest_type in ["physical", "intellectual", "mental"]:
        text = f"–¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {current_value}/{target_value}\n\n–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:"
    else:
        text = f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {'–≤—ã–ø–æ–ª–Ω–µ–Ω–æ' if current_value >= 1 else '–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ'}\n\n–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ? (–¥–∞/–Ω–µ—Ç):"
    keyboard = [[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"quest_{quest_id}")]]
    await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))
    await callback.answer()

@router.message(QuestProgress.waiting_for_value)
async def process_progress_value(message: Message, state: FSMContext):
    data = await state.get_data()
    quest_id = data.get("progress_quest_id")
    quest_type = data.get("quest_type")
    if quest_type == "custom":
        text = message.text.strip().lower()
        new_value = 1 if text in ["–¥–∞", "yes", "+", "y"] else 0
    else:
        if not message.text.isdigit():
            await message.answer("‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ")
            return
        new_value = int(message.text)
        # –î–ª—è percent-—Ç–∏–ø–æ–≤ –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –æ–≥—Ä–∞–Ω–∏—á–∏–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞
        if new_value < 0:
            await message.answer("‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º")
            return
    quest = await db.update_quest_progress(message.from_user.id, quest_id, new_value)
    await state.clear()
    if quest:
        await message.answer("‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±–Ω–æ–≤–ª—ë–Ω", reply_markup=get_quests_menu_keyboard())
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏", reply_markup=get_quests_menu_keyboard())

@router.callback_query(F.data.startswith("complete_"))
async def cb_complete(callback: CallbackQuery):
    try:
        quest_id = int(callback.data.split("_")[1])
    except Exception:
        await callback.answer("–û—à–∏–±–∫–∞ ID")
        return
    user_id = callback.from_user.id
    quest = await db.complete_quest(user_id, quest_id)
    if quest:
        await callback.answer("üéâ –ì–æ—Ç–æ–≤–æ")
        await cb_quest_detail(callback)
    else:
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")

@router.callback_query(F.data.startswith("edit_"))
async def cb_edit_menu(callback: CallbackQuery):
    try:
        quest_id = int(callback.data.split("_")[1])
    except Exception:
        await callback.answer("–û—à–∏–±–∫–∞ ID")
        return
    keyboard = [
        [InlineKeyboardButton(text="üìù –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_title_{quest_id}")],
        [InlineKeyboardButton(text="üéØ –¶–µ–ª—å", callback_data=f"edit_target_{quest_id}")],
        [InlineKeyboardButton(text="üìÖ –î–µ–¥–ª–∞–π–Ω", callback_data=f"edit_deadline_{quest_id}")],
        [InlineKeyboardButton(text="üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data=f"edit_comment_{quest_id}")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"quest_{quest_id}")],
    ]
    await callback.message.edit_text("–ß—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))
    await callback.answer()

@router.callback_query(F.data.startswith("edit_title_"))
async def cb_edit_title(callback: CallbackQuery, state: FSMContext):
    quest_id = int(callback.data.split("_")[2])
    await state.set_state(QuestEdit.waiting_for_title)
    await state.update_data(edit_quest_id=quest_id)
    keyboard = [[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"quest_{quest_id}")]]
    await callback.message.edit_text("–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:", reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))
    await callback.answer()

@router.message(QuestEdit.waiting_for_title)
async def process_edit_title(message: Message, state: FSMContext):
    text = message.text.strip()
    is_valid, error_msg = db.validate_input(text, "–ù–∞–∑–≤–∞–Ω–∏–µ")
    if not is_valid:
        await message.answer(f"‚ùå {error_msg}")
        return
    data = await state.get_data()
    quest_id = data.get("edit_quest_id")
    _, error = await db.update_quest(message.from_user.id, quest_id, title=text)
    await state.clear()
    if error:
        await message.answer(f"‚ùå {error}", reply_markup=get_quests_menu_keyboard())
    else:
        await message.answer("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ", reply_markup=get_quests_menu_keyboard())

@router.callback_query(F.data.startswith("edit_target_"))
async def cb_edit_target(callback: CallbackQuery, state: FSMContext):
    quest_id = int(callback.data.split("_")[2])
    await state.set_state(QuestEdit.waiting_for_target)
    await state.update_data(edit_quest_id=quest_id)
    keyboard = [[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"quest_{quest_id}")]]
    await callback.message.edit_text("–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ —Ü–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:", reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))
    await callback.answer()

@router.message(QuestEdit.waiting_for_target)
async def process_edit_target(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ")
        return
    value = int(message.text)
    if value <= 0:
        await message.answer("‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
        return
    data = await state.get_data()
    quest_id = data.get("edit_quest_id")
    _, error = await db.update_quest(message.from_user.id, quest_id, target_value=value)
    await state.clear()
    if error:
        await message.answer(f"‚ùå {error}", reply_markup=get_quests_menu_keyboard())
    else:
        await message.answer("‚úÖ –¶–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞", reply_markup=get_quests_menu_keyboard())

@router.callback_query(F.data.startswith("edit_deadline_"))
async def cb_edit_deadline(callback: CallbackQuery, state: FSMContext):
    quest_id = int(callback.data.split("_")[2])
    await state.set_state(QuestEdit.waiting_for_deadline)
    await state.update_data(edit_quest_id=quest_id)
    keyboard = [[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"quest_{quest_id}")]]
    await callback.message.edit_text("–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –¥–µ–¥–ª–∞–π–Ω (–î–î.–ú–ú.–ì–ì –∏–ª–∏ –î–î.–ú–ú.–ì–ì –ß–ß:–ú–ú) –∏–ª–∏ '–Ω–µ—Ç':", reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))
    await callback.answer()

@router.message(QuestEdit.waiting_for_deadline)
async def process_edit_deadline(message: Message, state: FSMContext):
    text = message.text.strip()
    deadline = None
    if text.lower() not in ["–Ω–µ—Ç", "no", "skip"]:
        try:
            text_normalized = text.replace('/', '.').replace('-', '.')
            if ' ' in text_normalized and ':' in text_normalized:
                deadline_date = datetime.strptime(text_normalized, "%d.%m.%y %H:%M")
            else:
                deadline_date = datetime.strptime(text_normalized, "%d.%m.%y")
            if deadline_date < datetime.now():
                await message.answer("‚ùå –ù–µ–ª—å–∑—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É!")
                return
            deadline = deadline_date.strftime("%Y-%m-%d %H:%M:%S")
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!")
            return
    data = await state.get_data()
    quest_id = data.get("edit_quest_id")
    _, error = await db.update_quest(message.from_user.id, quest_id, deadline=deadline)
    await state.clear()
    if error:
        await message.answer(f"‚ùå {error}", reply_markup=get_quests_menu_keyboard())
    else:
        await message.answer("‚úÖ –î–µ–¥–ª–∞–π–Ω –æ–±–Ω–æ–≤–ª—ë–Ω", reply_markup=get_quests_menu_keyboard())

@router.callback_query(F.data.startswith("edit_comment_"))
async def cb_edit_comment(callback: CallbackQuery, state: FSMContext):
    quest_id = int(callback.data.split("_")[2])
    await state.set_state(QuestEdit.waiting_for_comment)
    await state.update_data(edit_quest_id=quest_id)
    keyboard = [[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"quest_{quest_id}")]]
    await callback.message.edit_text("–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ '–Ω–µ—Ç':", reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))
    await callback.answer()

@router.message(QuestEdit.waiting_for_comment)
async def process_edit_comment(message: Message, state: FSMContext):
    text = message.text.strip()
    comment = None if text.lower() in ["–Ω–µ—Ç", "no", "skip"] else text
    if comment:
        is_valid, error_msg = db.validate_input(comment, "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
        if not is_valid:
            await message.answer(f"‚ùå {error_msg}")
            return
    data = await state.get_data()
    quest_id = data.get("edit_quest_id")
    _, error = await db.update_quest(message.from_user.id, quest_id, comment=comment)
    await state.clear()
    if error:
        await message.answer(f"‚ùå {error}", reply_markup=get_quests_menu_keyboard())
    else:
        await message.answer("‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–±–Ω–æ–≤–ª—ë–Ω", reply_markup=get_quests_menu_keyboard())

@router.callback_query(F.data == "back_to_menu")
async def cb_back_to_menu(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üìã –ö–≤–µ—Å—Ç—ã", callback_data="my_quests_inline")]]))
    await callback.answer()

@router.callback_query(F.data == "main_menu")
async def cb_main_menu(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üìã –ö–≤–µ—Å—Ç—ã", callback_data="my_quests_inline")]])
    )
    await callback.answer()

@router.callback_query(F.data == "create_quest_inline")
async def cb_create_quest_inline(callback: CallbackQuery, state: FSMContext):
    await state.set_state(QuestCreation.waiting_for_type)
    await callback.message.answer("–í—ã–±–µ—Ä–∏ —Ç–∏–ø –∫–≤–µ—Å—Ç–∞:", reply_markup=get_quest_type_keyboard())
    await callback.answer()


# –°—Ç–∞—Ä—ã–µ callback-—Ö–µ–Ω–¥–ª–µ—Ä—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è, —Ç.–∫. –≤—Å–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –Ω–∞ ReplyKeyboardMarkup


@router.message(F.text == "ü§ñ AI –ö–≤–µ—Å—Ç")
async def callback_ai_quest_message(message: Message, state: FSMContext):
    """AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–≤–µ—Å—Ç–∞"""
    if not config.WINDSURF_API_KEY:
        await message.answer("‚ö†Ô∏è AI —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return
    
    await state.set_state(AIQuest.waiting_for_goal)
    text = """
ü§ñ <b>AI –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ö–≤–µ—Å—Ç–æ–≤</b>

–û–ø–∏—à–∏ —Å–≤–æ—é —Ü–µ–ª—å, –∏ —è —Å–æ–∑–¥–∞–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–≤–µ—Å—Ç!

<b>–ü—Ä–∏–º–µ—Ä—ã:</b>
‚Ä¢ –•–æ—á—É –ø–æ—Ö—É–¥–µ—Ç—å –Ω–∞ 5 –∫–≥
‚Ä¢ –ù–∞—É—á–∏—Ç—å—Å—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞—Ç—å
‚Ä¢ –ß–∏—Ç–∞—Ç—å –±–æ–ª—å—à–µ –∫–Ω–∏–≥

–ù–∞–ø–∏—à–∏ —Å–≤–æ—é —Ü–µ–ª—å:
    """
    await message.answer(text, parse_mode="HTML", reply_markup=ReplyKeyboardRemove())


@router.message(AIQuest.waiting_for_goal)
async def process_ai_goal(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–ª–∏ –¥–ª—è AI"""
    goal = message.text.strip()
    
    await message.answer("ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–≤–µ—Å—Ç... –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ...")
    
    quest_data = await ai_client.generate_quest(goal)
    
    if not quest_data:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–≤–µ—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ —Å–æ–∑–¥–∞–π –∫–≤–µ—Å—Ç –≤—Ä—É—á–Ω—É—é.")
        await state.clear()
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–≤–µ—Å—Ç –∏–∑ –¥–∞–Ω–Ω—ã—Ö AI
    quest_id, error = await db.create_quest(
        user_id=message.from_user.id,
        title=quest_data.get("title", "AI –ö–≤–µ—Å—Ç"),
        quest_type=quest_data.get("quest_type", "custom"),
        target_value=quest_data.get("target_value", 100),
        comment=quest_data.get("description", "")
    )
    
    if error:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {error}")
    else:
        response = f"üéâ <b>–ö–≤–µ—Å—Ç —Å–æ–∑–¥–∞–Ω!</b>\n\n"
        response += f"üìù {quest_data.get('title')}\n\n"
        response += f"üí° {quest_data.get('description')}\n\n"
        
        if "tips" in quest_data and quest_data["tips"]:
            response += "<b>–°–æ–≤–µ—Ç—ã:</b>\n"
            for tip in quest_data["tips"][:3]:
                response += f"‚Ä¢ {tip}\n"
        
        await message.answer(response, reply_markup=get_quests_menu_keyboard(), parse_mode="HTML")
    
    await state.clear()


@router.callback_query(F.data == "stats")
async def callback_stats(callback: CallbackQuery):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üöß"
    keyboard = [[InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
    await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard), parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data == "help")
async def callback_help(callback: CallbackQuery):
    """–ü–æ–º–æ—â—å"""
    text = """
<b>üìö –ü–æ–º–æ—â—å</b>

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –°–ø—Ä–∞–≤–∫–∞
/add_task - –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É
/quest - AI –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
/progress - –ü—Ä–æ–≥—Ä–µ—Å—Å

<b>–¢–∏–ø—ã –∫–≤–µ—Å—Ç–æ–≤:</b>
üí™ –§–∏–∑–∏—á–µ—Å–∫–∏–µ
üìö –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ
üß† –ú–µ–Ω—Ç–∞–ª—å–Ω—ã–µ
üéØ –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–µ
    """
    keyboard = [[InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
    await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard), parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data == "cancel")
async def callback_cancel(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è"""
    await state.clear()
    await callback.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")
    await callback.message.edit_text(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="üìã –ö–≤–µ—Å—Ç—ã", callback_data="my_quests_inline")]]
        )
    )

@router.callback_query(F.data.startswith("meditate_"))
async def callback_meditate(callback: CallbackQuery):
    try:
        quest_id = int(callback.data.split("_")[1])
    except Exception:
        await callback.answer("–û—à–∏–±–∫–∞ ID")
        return
    user_id = callback.from_user.id
    quest = await db.get_quest(user_id, quest_id)
    if not quest:
        await callback.answer("–ö–≤–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    minutes = int(quest[4])
    await callback.answer("–¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω")
    await callback.message.answer(f"üßò –ú–µ–¥–∏—Ç–∞—Ü–∏—è –Ω–∞—á–∞—Ç–∞ –Ω–∞ {minutes} –º–∏–Ω.")
    async def _timer(chat_id: int, mins: int):
        from asyncio import sleep
        await sleep(mins * 60)
        await callback.message.bot.send_message(chat_id, "‚è∞ –í—Ä–µ–º—è –º–µ–¥–∏—Ç–∞—Ü–∏–∏ –≤—ã—à–ª–æ! –ö–∞–∫ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ?")
    try:
        import asyncio
        asyncio.create_task(_timer(callback.message.chat.id, minutes))
    except Exception:
        pass

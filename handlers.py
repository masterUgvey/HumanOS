"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ callback-–∫–Ω–æ–ø–æ–∫ –¥–ª—è Telegram-–±–æ—Ç–∞
–°–æ–¥–µ—Ä–∂–∏—Ç –≤—Å—é –ª–æ–≥–∏–∫—É –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
"""

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime
from loguru import logger

from database_async import db
from ai_client import ai_client
from config import config

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
router = Router()


# FSM States –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –¥–∏–∞–ª–æ–≥–∞
class QuestCreation(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–≤–µ—Å—Ç–∞"""
    waiting_for_type = State()
    waiting_for_title = State()
    waiting_for_target = State()
    waiting_for_deadline = State()
    waiting_for_comment = State()


class QuestEdit(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–≤–µ—Å—Ç–∞"""
    waiting_for_title = State()
    waiting_for_target = State()
    waiting_for_deadline = State()
    waiting_for_comment = State()


class QuestProgress(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    waiting_for_value = State()


class AIQuest(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–≤–µ—Å—Ç–∞ —á–µ—Ä–µ–∑ AI"""
    waiting_for_goal = State()


# ============= –ö–õ–ê–í–ò–ê–¢–£–†–´ =============

def get_main_menu_keyboard() -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = [
        [InlineKeyboardButton(text="üìã –ö–≤–µ—Å—Ç—ã", callback_data="quests_menu")],
        [InlineKeyboardButton(text="ü§ñ AI –ö–≤–µ—Å—Ç", callback_data="ai_quest")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
        [InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_quests_menu_keyboard() -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é –∫–≤–µ—Å—Ç–æ–≤"""
    keyboard = [
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–≤–µ—Å—Ç", callback_data="create_quest")],
        [InlineKeyboardButton(text="üìù –ú–æ–∏ –∫–≤–µ—Å—Ç—ã", callback_data="my_quests")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_quest_type_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∫–≤–µ—Å—Ç–∞"""
    keyboard = [
        [InlineKeyboardButton(text="üí™ –§–∏–∑–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞", callback_data="type_physical")],
        [InlineKeyboardButton(text="üìö –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞", callback_data="type_intellectual")],
        [InlineKeyboardButton(text="üß† –ú–µ–Ω—Ç–∞–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞", callback_data="type_mental")],
        [InlineKeyboardButton(text="üéØ –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞", callback_data="type_custom")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_quest_detail_keyboard(quest_id: int, completed: bool) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –∫–≤–µ—Å—Ç–∞"""
    keyboard = []
    if not completed:
        keyboard.append([InlineKeyboardButton(text="üìà –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data=f"progress_{quest_id}")])
        keyboard.append([InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"complete_{quest_id}")])
    keyboard.append([InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{quest_id}")])
    keyboard.append([InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{quest_id}")])
    keyboard.append([InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É", callback_data="my_quests")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def format_quest_text(quest: tuple) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∫–≤–µ—Å—Ç–∞"""
    quest_id, user_id, title, quest_type, target_value, current_value, completed, deadline, comment, created_at = quest
    
    type_emoji = {"physical": "üí™", "intellectual": "üìö", "mental": "üß†", "custom": "üéØ"}.get(quest_type, "üéØ")
    
    if quest_type in ["physical", "intellectual"]:
        progress_text = f"{current_value}/{target_value}"
    else:
        progress_text = f"{current_value}%"
    
    status = "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω" if completed else "‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ"
    
    text = f"{type_emoji} <b>{title}</b>\n\n"
    text += f"–¢–∏–ø: {config.QUEST_TYPES.get(quest_type, quest_type)}\n"
    text += f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_text}\n"
    text += f"–°—Ç–∞—Ç—É—Å: {status}\n"
    
    if deadline:
        try:
            d = datetime.strptime(deadline, "%Y-%m-%d %H:%M:%S")
            if d.hour != 0 or d.minute != 0:
                text += f"üìÖ –î–µ–¥–ª–∞–π–Ω: {d.strftime('%d.%m.%y %H:%M')}\n"
            else:
                text += f"üìÖ –î–µ–¥–ª–∞–π–Ω: {d.strftime('%d.%m.%y')}\n"
        except:
            pass
    
    if comment:
        text += f"\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}\n"
    
    return text


# ============= –ö–û–ú–ê–ù–î–´ =============

@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await state.clear()
    user = message.from_user
    await db.add_user(user.id, user.first_name or user.username or "User")
    
    welcome_text = f"""
–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üöÄ

–Ø ‚Äî —Ç–≤–æ–π –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –Ω–∞ –ø—É—Ç–∏ –∫ –°–≤–µ—Ä—Ö—á–µ–ª–æ–≤–µ–∫—É. 
–í–º–µ—Å—Ç–µ –º—ã –ø—Ä–µ–≤—Ä–∞—Ç–∏–º —Ä—É—Ç–∏–Ω—É –≤ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—É—é –∏–≥—Ä—É!

–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:
    """
    
    await message.answer(welcome_text, reply_markup=get_main_menu_keyboard())
    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.first_name}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")


@router.message(Command("help"))
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
<b>üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/add_task - –ë—ã—Å—Ç—Ä–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É
/quest - –°–æ–∑–¥–∞—Ç—å –∫–≤–µ—Å—Ç —á–µ—Ä–µ–∑ AI
/progress - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å

<b>üéØ –¢–∏–ø—ã –∫–≤–µ—Å—Ç–æ–≤:</b>
üí™ –§–∏–∑–∏—á–µ—Å–∫–∏–µ - —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
üìö –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ - —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
üß† –ú–µ–Ω—Ç–∞–ª—å–Ω—ã–µ - —Å –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
üéØ –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–µ - —Å –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

<b>ü§ñ AI –§—É–Ω–∫—Ü–∏–∏:</b>
–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /quest –∏–ª–∏ –∫–Ω–æ–ø–∫—É "AI –ö–≤–µ—Å—Ç" –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–≤–µ—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–≤–æ–µ–π —Ü–µ–ª–∏!
    """
    await message.answer(help_text, parse_mode="HTML")


@router.message(Command("add_task"))
async def cmd_add_task(message: Message, state: FSMContext):
    """–ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
    await state.set_state(QuestCreation.waiting_for_type)
    text = "–í—ã–±–µ—Ä–∏ —Ç–∏–ø –∫–≤–µ—Å—Ç–∞:"
    await message.answer(text, reply_markup=get_quest_type_keyboard())


@router.message(Command("quest"))
async def cmd_quest(message: Message, state: FSMContext):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–≤–µ—Å—Ç–∞ —á–µ—Ä–µ–∑ AI"""
    if not config.WINDSURF_API_KEY:
        await message.answer("‚ö†Ô∏è AI —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ WINDSURF_API_KEY –≤ .env —Ñ–∞–π–ª–µ.")
        return
    
    await state.set_state(AIQuest.waiting_for_goal)
    text = """
ü§ñ <b>AI –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ö–≤–µ—Å—Ç–æ–≤</b>

–û–ø–∏—à–∏ —Å–≤–æ—é —Ü–µ–ª—å, –∏ —è —Å–æ–∑–¥–∞–º –¥–ª—è —Ç–µ–±—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–≤–µ—Å—Ç!

<b>–ü—Ä–∏–º–µ—Ä—ã:</b>
‚Ä¢ –•–æ—á—É –ø–æ—Ö—É–¥–µ—Ç—å –Ω–∞ 5 –∫–≥
‚Ä¢ –ù–∞—É—á–∏—Ç—å—Å—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ Python
‚Ä¢ –ß–∏—Ç–∞—Ç—å –ø–æ –∫–Ω–∏–≥–µ –≤ –Ω–µ–¥–µ–ª—é
‚Ä¢ –ë–µ–≥–∞—Ç—å –∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ

–ù–∞–ø–∏—à–∏ —Å–≤–æ—é —Ü–µ–ª—å:
    """
    await message.answer(text, parse_mode="HTML")


@router.message(Command("progress"))
async def cmd_progress(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∫–≤–µ—Å—Ç–∞–º"""
    user_id = message.from_user.id
    quests = await db.get_user_quests(user_id)
    
    if not quests:
        await message.answer("üìã –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤!")
        return
    
    text = "<b>üìä –¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å:</b>\n\n"
    for quest in quests:
        quest_type = quest[3]
        title = quest[2]
        current = quest[5]
        target = quest[4]
        
        type_emoji = {"physical": "üí™", "intellectual": "üìö", "mental": "üß†", "custom": "üéØ"}.get(quest_type, "üéØ")
        
        if quest_type in ["physical", "intellectual"]:
            progress_text = f"{current}/{target}"
            percent = (current / target * 100) if target > 0 else 0
        else:
            progress_text = f"{current}%"
            percent = current
        
        bar_length = 10
        filled = int(bar_length * percent / 100)
        bar = "‚ñà" * filled + "‚ñë" * (bar_length - filled)
        
        text += f"{type_emoji} {title}\n"
        text += f"[{bar}] {progress_text} ({percent:.0f}%)\n\n"
    
    await message.answer(text, parse_mode="HTML")


# ============= CALLBACK HANDLERS =============

@router.callback_query(F.data == "main_menu")
async def callback_main_menu(callback: CallbackQuery, state: FSMContext):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()
    text = "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:"
    await callback.message.edit_text(text, reply_markup=get_main_menu_keyboard())
    await callback.answer()


@router.callback_query(F.data == "quests_menu")
async def callback_quests_menu(callback: CallbackQuery, state: FSMContext):
    """–ú–µ–Ω—é –∫–≤–µ—Å—Ç–æ–≤"""
    await state.clear()
    text = "üìã <b>–ö–≤–µ—Å—Ç—ã</b>\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:"
    await callback.message.edit_text(text, reply_markup=get_quests_menu_keyboard(), parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data == "create_quest")
async def callback_create_quest(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–≤–µ—Å—Ç–∞"""
    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –∫–≤–µ—Å—Ç–∞
    await db.add_user(callback.from_user.id, callback.from_user.first_name or callback.from_user.username or "User")
    await state.set_state(QuestCreation.waiting_for_type)
    text = "–í—ã–±–µ—Ä–∏ —Ç–∏–ø –∫–≤–µ—Å—Ç–∞:"
    await callback.message.edit_text(text, reply_markup=get_quest_type_keyboard())
    await callback.answer()


@router.callback_query(F.data.startswith("type_"))
async def callback_quest_type(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ç–∏–ø–∞ –∫–≤–µ—Å—Ç–∞"""
    quest_type = callback.data.replace("type_", "")
    await state.update_data(quest_type=quest_type)
    await state.set_state(QuestCreation.waiting_for_title)
    
    type_name = config.QUEST_TYPES.get(quest_type, "–ö–≤–µ—Å—Ç")
    text = f"–¢–∏–ø –∫–≤–µ—Å—Ç–∞: {type_name}\n\n–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–≤–µ—Å—Ç–∞:"
    await callback.message.edit_text(text)
    await callback.answer()


@router.message(QuestCreation.waiting_for_title)
async def process_quest_title(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–≤–µ—Å—Ç–∞"""
    title = message.text.strip()
    
    is_valid, error_msg = db.validate_input(title, "–ù–∞–∑–≤–∞–Ω–∏–µ")
    if not is_valid:
        await message.answer(f"‚ùå {error_msg}\n\n–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:")
        return
    
    data = await state.get_data()
    quest_type = data.get("quest_type")
    
    await state.update_data(title=title)
    
    if quest_type in ["mental", "custom"]:
        await state.update_data(target_value=100)
        await state.set_state(QuestCreation.waiting_for_deadline)
        text = f"–ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω?\n–§–æ—Ä–º–∞—Ç—ã: –î–î.–ú–ú.–ì–ì –∏–ª–∏ –î–î.–ú–ú.–ì–ì –ß–ß:–ú–ú\n–ò–ª–∏ –Ω–∞–ø–∏—à–∏ '–Ω–µ—Ç'"
    else:
        await state.set_state(QuestCreation.waiting_for_target)
        text = f"–ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n\n–í–≤–µ–¥–∏ —Ü–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (—á–∏—Å–ª–æ):"
    
    await message.answer(text)


@router.message(QuestCreation.waiting_for_target)
async def process_quest_target(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–ª–µ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è"""
    if not message.text.isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ!")
        return
    
    target_value = int(message.text)
    if target_value <= 0:
        await message.answer("‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!")
        return
    
    await state.update_data(target_value=target_value)
    await state.set_state(QuestCreation.waiting_for_deadline)
    text = f"–¶–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {target_value}\n\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω?\n–§–æ—Ä–º–∞—Ç—ã: –î–î.–ú–ú.–ì–ì –∏–ª–∏ –î–î.–ú–ú.–ì–ì –ß–ß:–ú–ú\n–ò–ª–∏ –Ω–∞–ø–∏—à–∏ '–Ω–µ—Ç'"
    await message.answer(text)


@router.message(QuestCreation.waiting_for_deadline)
async def process_quest_deadline(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–¥–ª–∞–π–Ω–∞"""
    text = message.text.strip()
    deadline = None
    
    if text.lower() not in ["–Ω–µ—Ç", "no", "skip"]:
        try:
            text_normalized = text.replace('/', '.').replace('-', '.')
            if ' ' in text_normalized and ':' in text_normalized:
                deadline_date = datetime.strptime(text_normalized, "%d.%m.%y %H:%M")
            else:
                deadline_date = datetime.strptime(text_normalized, "%d.%m.%y")
            
            if deadline_date < datetime.now():
                await message.answer("‚ùå –ù–µ–ª—å–∑—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É!")
                return
            
            deadline = deadline_date.strftime("%Y-%m-%d %H:%M:%S")
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!\n–ò—Å–ø–æ–ª—å–∑—É–π: –î–î.–ú–ú.–ì–ì –∏–ª–∏ –î–î.–ú–ú.–ì–ì –ß–ß:–ú–ú")
            return
    
    await state.update_data(deadline=deadline)
    await state.set_state(QuestCreation.waiting_for_comment)
    await message.answer("–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π?\n–ò–ª–∏ –Ω–∞–ø–∏—à–∏ '–Ω–µ—Ç'")


@router.message(QuestCreation.waiting_for_comment)
async def process_quest_comment(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–≤–µ—Å—Ç–∞"""
    text = message.text.strip()
    comment = None
    
    if text.lower() not in ["–Ω–µ—Ç", "no", "skip"]:
        is_valid, error_msg = db.validate_input(text, "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
        if not is_valid:
            await message.answer(f"‚ùå {error_msg}")
            return
        comment = text
    
    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –∫–≤–µ—Å—Ç–∞
    await db.add_user(message.from_user.id, message.from_user.first_name or message.from_user.username or "User")

    data = await state.get_data()
    quest_id, error = await db.create_quest(
        user_id=message.from_user.id,
        title=data["title"],
        quest_type=data["quest_type"],
        target_value=data["target_value"],
        deadline=data.get("deadline"),
        comment=comment
    )
    
    if error:
        await state.clear()
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞: {error}",
            reply_markup=get_quests_menu_keyboard()
        )
        return
    else:
        await message.answer(
            f"üéâ –ö–≤–µ—Å—Ç <b>{data['title']}</b> —Å–æ–∑–¥–∞–Ω!\n\n–ù–∞–π–¥–∏ –µ–≥–æ –≤ '–ú–æ–∏ –∫–≤–µ—Å—Ç—ã'",
            reply_markup=get_quests_menu_keyboard(),
            parse_mode="HTML"
        )
    
    await state.clear()


@router.callback_query(F.data == "my_quests")
async def callback_my_quests(callback: CallbackQuery):
    """–°–ø–∏—Å–æ–∫ –∫–≤–µ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback.from_user.id
    quests = await db.get_user_quests(user_id)
    
    if not quests:
        text = "üìã –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤!\n\n–°–æ–∑–¥–∞–π —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –∫–≤–µ—Å—Ç! üí™"
        keyboard = [
            [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –∫–≤–µ—Å—Ç", callback_data="create_quest")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="quests_menu")]
        ]
        await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))
        await callback.answer()
        return
    
    text = "üìã <b>–¢–≤–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–≤–µ—Å—Ç—ã:</b>\n\n"
    keyboard = []
    
    for quest in quests:
        quest_id = quest[0]
        title = quest[2]
        quest_type = quest[3]
        type_emoji = {"physical": "üí™", "intellectual": "üìö", "mental": "üß†", "custom": "üéØ"}.get(quest_type, "üéØ")
        keyboard.append([InlineKeyboardButton(text=f"{type_emoji} {title}", callback_data=f"quest_{quest_id}")])
    
    keyboard.append([InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –∫–≤–µ—Å—Ç", callback_data="create_quest")])
    keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="quests_menu")])
    
    await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard), parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data.startswith("quest_"))
async def callback_quest_detail(callback: CallbackQuery):
    """–î–µ—Ç–∞–ª–∏ –∫–≤–µ—Å—Ç–∞"""
    try:
        quest_id = int(callback.data.split("_")[1])
    except:
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID")
        return
    
    quest = await db.get_quest(callback.from_user.id, quest_id)
    if not quest:
        await callback.answer("‚ùå –ö–≤–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    text = format_quest_text(quest)
    completed = quest[6]
    await callback.message.edit_text(text, reply_markup=get_quest_detail_keyboard(quest_id, completed), parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data.startswith("complete_"))
async def callback_complete_quest(callback: CallbackQuery):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–∞"""
    try:
        quest_id = int(callback.data.split("_")[1])
    except:
        await callback.answer("–û—à–∏–±–∫–∞")
        return
    
    quest = await db.complete_quest(callback.from_user.id, quest_id)
    if quest:
        await callback.answer("üéâ –ö–≤–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
        text = format_quest_text(quest)
        await callback.message.edit_text(text, reply_markup=get_quest_detail_keyboard(quest_id, True), parse_mode="HTML")
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")


@router.callback_query(F.data == "ai_quest")
async def callback_ai_quest(callback: CallbackQuery, state: FSMContext):
    """AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–≤–µ—Å—Ç–∞"""
    if not config.WINDSURF_API_KEY:
        await callback.answer("‚ö†Ô∏è AI —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
        return
    
    await state.set_state(AIQuest.waiting_for_goal)
    text = """
ü§ñ <b>AI –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ö–≤–µ—Å—Ç–æ–≤</b>

–û–ø–∏—à–∏ —Å–≤–æ—é —Ü–µ–ª—å, –∏ —è —Å–æ–∑–¥–∞–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–≤–µ—Å—Ç!

<b>–ü—Ä–∏–º–µ—Ä—ã:</b>
‚Ä¢ –•–æ—á—É –ø–æ—Ö—É–¥–µ—Ç—å –Ω–∞ 5 –∫–≥
‚Ä¢ –ù–∞—É—á–∏—Ç—å—Å—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞—Ç—å
‚Ä¢ –ß–∏—Ç–∞—Ç—å –±–æ–ª—å—à–µ –∫–Ω–∏–≥

–ù–∞–ø–∏—à–∏ —Å–≤–æ—é —Ü–µ–ª—å:
    """
    await callback.message.edit_text(text, parse_mode="HTML")
    await callback.answer()


@router.message(AIQuest.waiting_for_goal)
async def process_ai_goal(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–ª–∏ –¥–ª—è AI"""
    goal = message.text.strip()
    
    await message.answer("ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–≤–µ—Å—Ç... –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ...")
    
    quest_data = await ai_client.generate_quest(goal)
    
    if not quest_data:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–≤–µ—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ —Å–æ–∑–¥–∞–π –∫–≤–µ—Å—Ç –≤—Ä—É—á–Ω—É—é.")
        await state.clear()
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–≤–µ—Å—Ç –∏–∑ –¥–∞–Ω–Ω—ã—Ö AI
    quest_id, error = await db.create_quest(
        user_id=message.from_user.id,
        title=quest_data.get("title", "AI –ö–≤–µ—Å—Ç"),
        quest_type=quest_data.get("quest_type", "custom"),
        target_value=quest_data.get("target_value", 100),
        comment=quest_data.get("description", "")
    )
    
    if error:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {error}")
    else:
        response = f"üéâ <b>–ö–≤–µ—Å—Ç —Å–æ–∑–¥–∞–Ω!</b>\n\n"
        response += f"üìù {quest_data.get('title')}\n\n"
        response += f"üí° {quest_data.get('description')}\n\n"
        
        if "tips" in quest_data and quest_data["tips"]:
            response += "<b>–°–æ–≤–µ—Ç—ã:</b>\n"
            for tip in quest_data["tips"][:3]:
                response += f"‚Ä¢ {tip}\n"
        
        await message.answer(response, reply_markup=get_quests_menu_keyboard(), parse_mode="HTML")
    
    await state.clear()


@router.callback_query(F.data == "stats")
async def callback_stats(callback: CallbackQuery):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üöß"
    keyboard = [[InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
    await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard), parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data == "help")
async def callback_help(callback: CallbackQuery):
    """–ü–æ–º–æ—â—å"""
    text = """
<b>üìö –ü–æ–º–æ—â—å</b>

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –°–ø—Ä–∞–≤–∫–∞
/add_task - –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É
/quest - AI –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
/progress - –ü—Ä–æ–≥—Ä–µ—Å—Å

<b>–¢–∏–ø—ã –∫–≤–µ—Å—Ç–æ–≤:</b>
üí™ –§–∏–∑–∏—á–µ—Å–∫–∏–µ
üìö –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ
üß† –ú–µ–Ω—Ç–∞–ª—å–Ω—ã–µ
üéØ –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–µ
    """
    keyboard = [[InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
    await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard), parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data == "cancel")
async def callback_cancel(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è"""
    await state.clear()
    await callback.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")
    await callback_main_menu(callback, state)

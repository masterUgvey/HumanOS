from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import (
    Message,
    CallbackQuery,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime, timedelta
from datetime_utils import (
    comment_should_be_saved,
)
from loguru import logger

from database_async import db
from ai_client import ai_client
from config import config

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
router = Router()

# –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –º–µ–¥–∏—Ç–∞—Ü–∏–∏: {(user_id, quest_id): {"start": datetime, "task": asyncio.Task}}
MEDITATION_SESSIONS = {}


# FSM States –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –¥–∏–∞–ª–æ–≥–∞
class QuestCreation(StatesGroup):
    waiting_for_type = State()
    waiting_for_title = State()
    waiting_for_reps = State()
    waiting_for_sets = State()
    waiting_for_pages = State()
    waiting_for_minutes = State()
    waiting_for_progress = State()
    waiting_for_deadline_input = State()
    waiting_for_deadline_time = State()
    waiting_for_comment = State()

class QuestEdit(StatesGroup):
    waiting_for_title = State()
    waiting_for_target = State()
    waiting_for_comment = State()

class QuestProgress(StatesGroup):
    waiting_for_value = State()

class AIQuest(StatesGroup):
    waiting_for_goal = State()

def get_quests_menu_keyboard() -> ReplyKeyboardMarkup:
    keyboard = [
        [KeyboardButton(text="üìã –ö–≤–µ—Å—Ç—ã"), KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
        [KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å"), KeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –∫–≤–µ—Å—Ç")],
        [KeyboardButton(text="—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å")],
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True, one_time_keyboard=False)

def get_quest_type_keyboard() -> ReplyKeyboardMarkup:
    keyboard = [
        [KeyboardButton(text="üí™ –§–∏–∑–∏—á–µ—Å–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"), KeyboardButton(text="üìö –ß—Ç–µ–Ω–∏–µ")],
        [KeyboardButton(text="üß† –ú–µ–¥–∏—Ç–∞—Ü–∏—è"), KeyboardButton(text="üéØ –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –∫–≤–µ—Å—Ç")],
        [KeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞")],
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True, one_time_keyboard=False)


def compute_status_emoji(deadline_str: str | None) -> str:
    """–ú–∞—Ä–∫–µ—Ä —Å—Ç–∞—Ç—É—Å–∞ –ø–æ –¥–µ–¥–ª–∞–π–Ω—É:
    ‚ö™ ‚Äî –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–ª–∏ –¥–µ–¥–ª–∞–π–Ω–∞ –Ω–µ—Ç
    üü° ‚Äî –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞ ‚â§ 1 —á–∞—Å–∞
    üî¥ ‚Äî –ø—Ä–æ—Å—Ä–æ—á–µ–Ω
    """
    try:
        if not deadline_str:
            return "‚ö™"
        dt = datetime.strptime(deadline_str, "%Y-%m-%d %H:%M:%S")
        now_utc = datetime.utcnow()
        delta = dt - now_utc
        if delta.total_seconds() < 0:
            return "üî¥"
        if delta.total_seconds() <= 3600:
            return "üü°"
        return "‚ö™"
    except Exception:
        return "‚ö™"

def get_quest_detail_keyboard(quest_id: int, completed: bool, quest_type: str, target_value: int) -> InlineKeyboardMarkup:
    keyboard = []
    # –°–∫—Ä—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è custom –±–µ–∑ —à–∫–∞–ª—ã –∏ –¥–ª—è –º–µ–¥–∏—Ç–∞—Ü–∏–∏
    if not completed and not (quest_type == "custom" and int(target_value or 0) == 0) and quest_type != "mental":
        keyboard.append([InlineKeyboardButton(text="üìà –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data=f"progress_{quest_id}")])
    if not completed:
        keyboard.append([InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"complete_{quest_id}")])
    keyboard.append([InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{quest_id}")])
    keyboard.append([InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{quest_id}")])
    if quest_type == "mental":
        keyboard.append([InlineKeyboardButton(text="‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –º–µ–¥–∏—Ç–∞—Ü–∏—é", callback_data=f"meditate_{quest_id}")])
    keyboard.append([InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É", callback_data="my_quests_inline")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

@router.callback_query(F.data.startswith("quest_"))
async def cb_quest_detail(callback: CallbackQuery):
    try:
        quest_id = int(callback.data.split("_")[1])
    except Exception:
        await callback.answer("–û—à–∏–±–∫–∞ ID")
        return
    user_id = callback.from_user.id
    quest = await db.get_quest(user_id, quest_id)
    if not quest:
        await callback.answer("–ö–≤–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    tz_off, _ = await db.get_user_timezone(user_id)
    text = format_quest_text(quest, tz_off)
    completed = bool(quest[6])
    quest_type = quest[3]
    target_value = int(quest[4])
    await callback.message.edit_text(text, reply_markup=get_quest_detail_keyboard(quest_id, completed, quest_type, target_value), parse_mode="HTML")
    await callback.answer()

def format_quest_text(quest: tuple, tz_offset_minutes: int | None = None) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∫–≤–µ—Å—Ç–∞ —Å —É—á–µ—Ç–æ–º –Ω–∞–ª–∏—á–∏—è –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏"""
    # –ü–æ—Ä—è–¥–æ–∫ –∫–æ–ª–æ–Ω–æ–∫: quest_id, user_id, title, quest_type, target_value, current_value,
    # completed, deadline, comment, created_at, has_date, has_time
    quest_id, user_id, title, quest_type, target_value, current_value, completed, deadline, comment, created_at, has_date, has_time = quest
    
    type_emoji = {"physical": "üí™", "intellectual": "üìö", "mental": "üß†", "custom": "üéØ"}.get(quest_type, "üéØ")
    
    if quest_type in ["physical", "intellectual", "mental"]:
        progress_text = f"{current_value}/{target_value}"
    else:
        # –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –±–µ–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (target_value == 0) ‚Äî —Å–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        progress_text = None if int(target_value or 0) == 0 else f"{current_value}%"
    
    status = "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω" if completed else "‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ"
    
    text = f"{type_emoji} <b>{title}</b>\nID: {quest_id}\n\n"
    text += f"–¢–∏–ø: {config.QUEST_TYPES.get(quest_type, quest_type)}\n"
    if progress_text is not None:
        text += f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_text}\n"
    text += f"–°—Ç–∞—Ç—É—Å: {status}\n"
    # –î–µ–¥–ª–∞–π–Ω (–ª–æ–≥–∏–∫–∞ —á–µ—Ä–µ–∑ —Ñ–ª–∞–≥–∏ has_date/has_time)
    try:
        hd = bool(has_date)
        ht = bool(has_time)
    except Exception:
        hd = deadline is not None
        # –µ—Å–ª–∏ –µ—Å—Ç—å —Å—Ç—Ä–æ–∫–∞ –¥–µ–¥–ª–∞–π–Ω–∞, –Ω–æ 00:00:00 ‚Äî —Å—á–∏—Ç–∞–µ–º –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏
        ht = bool(deadline) and (str(deadline).strip()[-8:] != "00:00:00")

    if not hd:
        text += "–î–µ–¥–ª–∞–π–Ω: –±–µ–∑ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏\n"
    else:
        # –µ—Å—Ç—å –¥–∞—Ç–∞; –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∏ –Ω–µ—Ç (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π), –≤—ã—Ö–æ–¥
        if not deadline:
            text += "–î–µ–¥–ª–∞–π–Ω: –±–µ–∑ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏\n"
        else:
            try:
                dt = datetime.strptime(deadline, "%Y-%m-%d %H:%M:%S")
                if tz_offset_minutes is not None:
                    dt = dt + timedelta(minutes=int(tz_offset_minutes))
                date_str = dt.strftime("%d.%m.%y")
                if not ht:
                    text += f"–î–µ–¥–ª–∞–π–Ω: {date_str}, –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏\n"
                else:
                    time_str = dt.strftime("%H:%M")
                    text += f"–î–µ–¥–ª–∞–π–Ω: {date_str} {time_str}\n"
            except Exception:
                text += "–î–µ–¥–ª–∞–π–Ω: —É–∫–∞–∑–∞–Ω\n"
    
    if comment and comment_should_be_saved(str(comment), None):
        text += f"\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}\n"
    
    return text

@router.callback_query(F.data.startswith("complete_"))
async def cb_complete(callback: CallbackQuery):
    try:
        quest_id = int(callback.data.split("_")[1])
    except Exception:
        await callback.answer("–û—à–∏–±–∫–∞ ID")
        return
    user_id = callback.from_user.id
    quest = await db.complete_quest(user_id, quest_id)
    if quest:
        await callback.answer("üéâ –ì–æ—Ç–æ–≤–æ")
        await cb_quest_detail(callback)
    else:
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")


@router.callback_query(F.data.startswith("delete_"))
async def cb_delete_quest(callback: CallbackQuery):
    try:
        quest_id = int(callback.data.split("_")[1])
    except Exception:
        await callback.answer("–û—à–∏–±–∫–∞ ID")
        return
    user_id = callback.from_user.id
    ok = await db.delete_quest(user_id, quest_id)
    if ok:
        await callback.answer("üóë –£–¥–∞–ª–µ–Ω–æ")
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–≤–µ—Å—Ç–æ–≤
        quests = await db.get_user_quests(user_id)
        if not quests:
            keyboard = [[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
            await callback.message.edit_text("üìã –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤!", reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))
        else:
            keyboard = []
            for quest in quests:
                q_id = quest[0]
                title = quest[2]
                q_type = quest[3]
                status_emoji = compute_status_emoji(quest[7])
                type_emoji = {"physical": "üí™", "intellectual": "üìö", "mental": "üß†", "custom": "üéØ"}.get(q_type, "üéØ")
                keyboard.append([InlineKeyboardButton(text=f"{status_emoji} {type_emoji} {title}", callback_data=f"quest_{q_id}")])
            await callback.message.edit_text("üìã –í—ã–±–µ—Ä–∏ –∫–≤–µ—Å—Ç:", reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))
    else:
        await callback.answer("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è")

@router.callback_query(F.data.startswith("edit_"))
async def cb_edit_menu(callback: CallbackQuery):
    try:
        quest_id = int(callback.data.split("_")[1])
    except Exception:
        await callback.answer("–û—à–∏–±–∫–∞ ID")
        return
    keyboard = [
        [InlineKeyboardButton(text="üìù –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_title_{quest_id}")],
        [InlineKeyboardButton(text="üéØ –¶–µ–ª—å", callback_data=f"edit_target_{quest_id}")],
        [InlineKeyboardButton(text="üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data=f"edit_comment_{quest_id}")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"quest_{quest_id}")],
    ]
    await callback.message.edit_text("–ß—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))
    await callback.answer()

@router.callback_query(F.data.startswith("edit_title_"))
async def cb_edit_title(callback: CallbackQuery, state: FSMContext):
    quest_id = int(callback.data.split("_")[2])
    await state.set_state(QuestEdit.waiting_for_title)
    await state.update_data(edit_quest_id=quest_id)
    keyboard = [[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"quest_{quest_id}")]]
    await callback.message.edit_text("–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:", reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))
    await callback.answer()

@router.message(QuestEdit.waiting_for_title)
async def process_edit_title(message: Message, state: FSMContext):
    text = message.text.strip()
    is_valid, error_msg = db.validate_input(text, "–ù–∞–∑–≤–∞–Ω–∏–µ")
    if not is_valid:
        await message.answer(f"‚ùå {error_msg}")
        return
    data = await state.get_data()
    quest_id = data.get("edit_quest_id")
    _, error = await db.update_quest(message.from_user.id, quest_id, title=text)
    await state.clear()
    if error:
        await message.answer(f"‚ùå {error}", reply_markup=get_quests_menu_keyboard())
    else:
        await message.answer("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ", reply_markup=get_quests_menu_keyboard())

@router.callback_query(F.data.startswith("edit_target_"))
async def cb_edit_target(callback: CallbackQuery, state: FSMContext):
    quest_id = int(callback.data.split("_")[2])
    await state.set_state(QuestEdit.waiting_for_target)
    await state.update_data(edit_quest_id=quest_id)
    keyboard = [[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"quest_{quest_id}")]]
    await callback.message.edit_text("–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ —Ü–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:", reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))
    await callback.answer()

@router.message(QuestEdit.waiting_for_target)
async def process_edit_target(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ")
        return
    value = int(message.text)
    if value <= 0:
        await message.answer("‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
        return
    data = await state.get_data()
    quest_id = data.get("edit_quest_id")
    _, error = await db.update_quest(message.from_user.id, quest_id, target_value=value)
    await state.clear()
    if error:
        await message.answer(f"‚ùå {error}", reply_markup=get_quests_menu_keyboard())
    else:
        await message.answer("‚úÖ –¶–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞", reply_markup=get_quests_menu_keyboard())

## –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–¥–ª–∞–π–Ω–∞ —É–¥–∞–ª–µ–Ω–æ

@router.callback_query(F.data.startswith("edit_comment_"))
async def cb_edit_comment(callback: CallbackQuery, state: FSMContext):
    quest_id = int(callback.data.split("_")[2])
    await state.set_state(QuestEdit.waiting_for_comment)
    await state.update_data(edit_quest_id=quest_id)
    keyboard = [[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"quest_{quest_id}")]]
    await callback.message.edit_text("–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ '–Ω–µ—Ç':", reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))
    await callback.answer()

@router.message(QuestEdit.waiting_for_comment)
async def process_edit_comment(message: Message, state: FSMContext):
    text = message.text.strip()
    comment = None if text.lower() in ["–Ω–µ—Ç", "no", "skip"] else text
    if comment:
        is_valid, error_msg = db.validate_input(comment, "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
        if not is_valid:
            await message.answer(f"‚ùå {error_msg}")
            return
    data = await state.get_data()
    quest_id = data.get("edit_quest_id")
    _, error = await db.update_quest(message.from_user.id, quest_id, comment=comment)
    await state.clear()
    if error:
        await message.answer(f"‚ùå {error}", reply_markup=get_quests_menu_keyboard())
    else:
        await message.answer("‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–±–Ω–æ–≤–ª—ë–Ω", reply_markup=get_quests_menu_keyboard())

@router.callback_query(F.data == "back_to_menu")
async def cb_back_to_menu(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üìã –ö–≤–µ—Å—Ç—ã", callback_data="my_quests_inline")]]))
    await callback.answer()

@router.callback_query(F.data == "main_menu")
async def cb_main_menu(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üìã –ö–≤–µ—Å—Ç—ã", callback_data="my_quests_inline")]])
    )
    await callback.answer()

@router.callback_query(F.data == "create_quest_inline")
async def cb_create_quest_inline(callback: CallbackQuery, state: FSMContext):
    await state.set_state(QuestCreation.waiting_for_type)
    await callback.message.answer("–í—ã–±–µ—Ä–∏ —Ç–∏–ø –∫–≤–µ—Å—Ç–∞:", reply_markup=get_quest_type_keyboard())
    await callback.answer()


# –°—Ç–∞—Ä—ã–µ callback-—Ö–µ–Ω–¥–ª–µ—Ä—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è, —Ç.–∫. –≤—Å–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –Ω–∞ ReplyKeyboardMarkup


@router.message(F.text == "ü§ñ AI –ö–≤–µ—Å—Ç")
async def callback_ai_quest_message(message: Message, state: FSMContext):
    """AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–≤–µ—Å—Ç–∞"""
    if not config.WINDSURF_API_KEY:
        await message.answer("‚ö†Ô∏è AI —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return
    
    await state.set_state(AIQuest.waiting_for_goal)
    text = """
ü§ñ <b>AI –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ö–≤–µ—Å—Ç–æ–≤</b>

–û–ø–∏—à–∏ —Å–≤–æ—é —Ü–µ–ª—å, –∏ —è —Å–æ–∑–¥–∞–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–≤–µ—Å—Ç!

<b>–ü—Ä–∏–º–µ—Ä—ã:</b>
‚Ä¢ –•–æ—á—É –ø–æ—Ö—É–¥–µ—Ç—å –Ω–∞ 5 –∫–≥
‚Ä¢ –ù–∞—É—á–∏—Ç—å—Å—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞—Ç—å
‚Ä¢ –ß–∏—Ç–∞—Ç—å –±–æ–ª—å—à–µ –∫–Ω–∏–≥

–ù–∞–ø–∏—à–∏ —Å–≤–æ—é —Ü–µ–ª—å:
    """
    await message.answer(text, parse_mode="HTML", reply_markup=ReplyKeyboardRemove())


@router.message(AIQuest.waiting_for_goal)
async def process_ai_goal(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–ª–∏ –¥–ª—è AI"""
    goal = message.text.strip()
    
    await message.answer("ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–≤–µ—Å—Ç... –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ...")
    
    quest_data = await ai_client.generate_quest(goal)
    
    if not quest_data:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–≤–µ—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ —Å–æ–∑–¥–∞–π –∫–≤–µ—Å—Ç –≤—Ä—É—á–Ω—É—é.")
        await state.clear()
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–≤–µ—Å—Ç –∏–∑ –¥–∞–Ω–Ω—ã—Ö AI
    quest_id, error = await db.create_quest(
        user_id=message.from_user.id,
        title=quest_data.get("title", "AI –ö–≤–µ—Å—Ç"),
        quest_type=quest_data.get("quest_type", "custom"),
        target_value=quest_data.get("target_value", 100),
        comment=quest_data.get("description", "")
    )
    
    if error:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {error}")
    else:
        response = f"üéâ <b>–ö–≤–µ—Å—Ç —Å–æ–∑–¥–∞–Ω!</b>\n\n"
        response += f"üìù {quest_data.get('title')}\n\n"
        response += f"üí° {quest_data.get('description')}\n\n"
        
        if "tips" in quest_data and quest_data["tips"]:
            response += "<b>–°–æ–≤–µ—Ç—ã:</b>\n"
            for tip in quest_data["tips"][:3]:
                response += f"‚Ä¢ {tip}\n"
        
        await message.answer(response, reply_markup=get_quests_menu_keyboard(), parse_mode="HTML")
    
    await state.clear()


@router.callback_query(F.data == "stats")
async def callback_stats(callback: CallbackQuery):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üöß"
    keyboard = [[InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
    await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard), parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data == "help")
async def callback_help(callback: CallbackQuery):
    """–ü–æ–º–æ—â—å"""
    text = """
<b>üìö –ü–æ–º–æ—â—å</b>

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –°–ø—Ä–∞–≤–∫–∞
/add_task - –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É
/quest - AI –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
/progress - –ü—Ä–æ–≥—Ä–µ—Å—Å

<b>–¢–∏–ø—ã –∫–≤–µ—Å—Ç–æ–≤:</b>
üí™ –§–∏–∑–∏—á–µ—Å–∫–∏–µ
üìö –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ
üß† –ú–µ–Ω—Ç–∞–ª—å–Ω—ã–µ
üéØ –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–µ
    """
    keyboard = [[InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
    await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard), parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data == "cancel")
async def callback_cancel(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è"""
    await state.clear()
    await callback.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")
    await callback.message.edit_text(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="üìã –ö–≤–µ—Å—Ç—ã", callback_data="my_quests_inline")]]
        )
    )

@router.callback_query(F.data.startswith("meditate_"))
async def callback_meditate(callback: CallbackQuery):
    try:
        quest_id = int(callback.data.split("_")[1])
    except Exception:
        await callback.answer("–û—à–∏–±–∫–∞ ID")
        return
    user_id = callback.from_user.id
    quest = await db.get_quest(user_id, quest_id)
    if not quest:
        await callback.answer("–ö–≤–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    minutes = int(quest[4])
    await callback.answer("–¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω")
    # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã –º–µ–¥–∏—Ç–∞—Ü–∏–∏
    cancel_kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_meditation_{quest_id}")]]
    )
    await callback.message.answer(f"üßò –ú–µ–¥–∏—Ç–∞—Ü–∏—è –Ω–∞—á–∞—Ç–∞ –Ω–∞ {minutes} –º–∏–Ω.", reply_markup=cancel_kb)
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
    try:
        import asyncio
        start_time = datetime.now()
        async def _timer(chat_id: int, mins: int, u_id: int, q_id: int):
            from asyncio import sleep
            await sleep(mins * 60)
            # –£–±–∏—Ä–∞–µ–º —Å–µ—Å—Å–∏—é, –µ—Å–ª–∏ –µ—Å—Ç—å
            MEDITATION_SESSIONS.pop((u_id, q_id), None)
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –∫–≤–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            try:
                await db.complete_quest(u_id, q_id)
            except Exception:
                pass
            # –°–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –∫–≤–µ—Å—Ç–æ–≤
            await callback.message.bot.send_message(chat_id, "–º–µ–¥–∏—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–≤–µ—Å—Ç–æ–≤ (inline)
            quests = await db.get_user_quests(u_id)
            keyboard = []
            for q in quests:
                q_id2 = q[0]
                title2 = q[2]
                q_type2 = q[3]
                status_emoji = compute_status_emoji(q[7])
                type_emoji = {"physical": "üí™", "intellectual": "üìö", "mental": "üß†", "custom": "üéØ"}.get(q_type2, "üéØ")
                keyboard.append([InlineKeyboardButton(text=f"{status_emoji} {type_emoji} {title2}", callback_data=f"quest_{q_id2}")])
            await callback.message.bot.send_message(chat_id, "üìã –í—ã–±–µ—Ä–∏ –∫–≤–µ—Å—Ç:", reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))

        task = asyncio.create_task(_timer(callback.message.chat.id, minutes, user_id, quest_id))
        MEDITATION_SESSIONS[(user_id, quest_id)] = {"start": start_time, "task": task}
    except Exception:
        pass

@router.callback_query(F.data.startswith("cancel_meditation_"))
async def cancel_meditation(callback: CallbackQuery):
    try:
        quest_id = int(callback.data.split("_")[2])
    except Exception:
        await callback.answer("–û—à–∏–±–∫–∞ ID")
        return
    user_id = callback.from_user.id
    sess = MEDITATION_SESSIONS.pop((user_id, quest_id), None)
    elapsed_minutes = 0
    if sess:
        try:
            task = sess.get("task")
            if task:
                task.cancel()
        except Exception:
            pass
        try:
            start = sess.get("start")
            if isinstance(start, datetime):
                elapsed_minutes = int(max(0, (datetime.now() - start).total_seconds() // 60))
        except Exception:
            elapsed_minutes = 0
    # –û–±–Ω–æ–≤–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å –º–µ–¥–∏—Ç–∞—Ü–∏–∏ –ø—Ä–æ—à–µ–¥—à–∏–º–∏ –º–∏–Ω—É—Ç–∞–º–∏, –Ω–µ –ø—Ä–µ–≤—ã—à–∞—è —Ü–µ–ª—å
    quest = await db.get_quest(user_id, quest_id)
    if quest:
        target_minutes = int(quest[4])
        new_value = min(elapsed_minutes, target_minutes)
        try:
            await db.update_quest_progress(user_id, quest_id, new_value)
        except Exception:
            pass
    await callback.answer("–º–µ–¥–∏—Ç–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞")
    # –í–µ—Ä–Ω—ë–º—Å—è –Ω–∞ —Ñ–æ—Ä–º—É –∫–≤–µ—Å—Ç–∞
    quest = await db.get_quest(user_id, quest_id)
    if quest:
        tz_off, _ = await db.get_user_timezone(user_id)
        text = format_quest_text(quest, tz_off)
        completed = bool(quest[6])
        quest_type = quest[3]
        target_value = int(quest[4])
        await callback.message.edit_text(text, reply_markup=get_quest_detail_keyboard(quest_id, completed, quest_type, target_value), parse_mode="HTML")
        # –ù–∏–∑–æ–≤–æ–µ –º–µ–Ω—é –¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ reply-–º–µ–Ω—é —É–∂–µ –∏–º–µ—é—â–µ–µ—Å—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

@router.message(F.text.casefold() == "–æ—Ç–º–µ–Ω–∞")
async def cancel_creation(message: Message, state: FSMContext):
    cur = await state.get_state()
    # –û—Ç–º–µ–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è
    if cur and cur.startswith(QuestCreation.__name__):
        await state.clear()
        await message.answer("üìã –ö–≤–µ—Å—Ç—ã\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_quests_menu_keyboard())


@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    user = message.from_user
    await db.add_user(user.id, user.first_name or user.username or "User")
    welcome_text = (
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üöÄ\n\n"
        "–Ø ‚Äî —Ç–≤–æ–π –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –Ω–∞ –ø—É—Ç–∏ –∫ –°–≤–µ—Ä—Ö—á–µ–ª–æ–≤–µ–∫—É.\n"
        "–í–º–µ—Å—Ç–µ –º—ã –ø—Ä–µ–≤—Ä–∞—Ç–∏–º —Ä—É—Ç–∏–Ω—É –≤ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—É—é –∏–≥—Ä—É!\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    await message.answer(welcome_text, reply_markup=get_quests_menu_keyboard())


@router.message(Command("logs_on"))
async def cmd_logs_on(message: Message):
    await db.add_user(message.from_user.id, message.from_user.first_name or message.from_user.username or "User")
    await db.set_log_subscription(message.from_user.id, True)
    await message.answer("üì° RT-–ª–æ–≥–∏ –≤–∫–ª—é—á–µ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞")


@router.message(Command("logs_off"))
async def cmd_logs_off(message: Message):
    await db.set_log_subscription(message.from_user.id, False)
    await message.answer("üõ∞ RT-–ª–æ–≥–∏ –≤—ã–∫–ª—é—á–µ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞")


@router.message((F.text == "üìã –ö–≤–µ—Å—Ç—ã") | (F.text.casefold() == "–∫–≤–µ—Å—Ç—ã"))
async def show_my_quests(message: Message, state: FSMContext):
    try:
        await state.clear()
    except Exception:
        pass
    user_id = message.from_user.id
    quests = await db.get_user_quests(user_id)
    if not quests:
        await message.answer("üìã –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤!")
        return
    keyboard = []
    for quest in quests:
        q_id = quest[0]
        title = quest[2]
        q_type = quest[3]
        status_emoji = compute_status_emoji(quest[7])
        type_emoji = {"physical": "üí™", "intellectual": "üìö", "mental": "üß†", "custom": "üéØ"}.get(q_type, "üéØ")
        keyboard.append([InlineKeyboardButton(text=f"{status_emoji} {type_emoji} {title}", callback_data=f"quest_{q_id}")])
    await message.answer("üìã –í—ã–±–µ—Ä–∏ –∫–≤–µ—Å—Ç:", reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))


@router.message(F.text == "‚ûï –°–æ–∑–¥–∞—Ç—å –∫–≤–µ—Å—Ç")
async def create_quest_menu(message: Message, state: FSMContext):
    # –û–¥–∏–Ω —Ä–∞–∑ –ø—Ä–µ–¥–ª–æ–∂–∏–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å TZ, –µ—Å–ª–∏ –µ—â—ë –Ω–µ –ø—Ä–µ–¥–ª–∞–≥–∞–ª–∏
    tz_off, prompted = await db.get_user_timezone(message.from_user.id)
    if not prompted:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data="tz_setup_now")],
            [InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="tz_setup_skip")],
        ])
        await state.update_data(_pending_creation_after_tz=True)
        await message.answer("–î–ª—è —Ç–æ—á–Ω–æ–≥–æ –¥–µ–¥–ª–∞–π–Ω–∞ —É–∫–∞–∂–∏ —Å–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å. –°–¥–µ–ª–∞—Ç—å —Å–µ–π—á–∞—Å?", reply_markup=kb)
        return
    await state.set_state(QuestCreation.waiting_for_type)
    await message.answer("–í—ã–±–µ—Ä–∏ —Ç–∏–ø –∫–≤–µ—Å—Ç–∞:", reply_markup=get_quest_type_keyboard())


class TimezoneSetup(StatesGroup):
    waiting_for_local_time = State()

@router.message(F.text.casefold() == "—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å")
async def cmd_set_timezone(message: Message, state: FSMContext):
    await state.set_state(TimezoneSetup.waiting_for_local_time)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Ç–µ–∫—É—â–µ–µ –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM")

@router.callback_query(F.data == "tz_setup_now")
async def cb_tz_setup_now(callback: CallbackQuery, state: FSMContext):
    await state.set_state(TimezoneSetup.waiting_for_local_time)
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Ç–µ–∫—É—â–µ–µ –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM")
    await callback.answer()

@router.callback_query(F.data == "tz_setup_skip")
async def cb_tz_setup_skip(callback: CallbackQuery, state: FSMContext):
    await db.set_user_tz_prompted(callback.from_user.id)
    pending = (await state.get_data()).get("_pending_creation_after_tz")
    await callback.answer("–û–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    if pending:
        await state.set_state(QuestCreation.waiting_for_type)
        await callback.message.answer("–í—ã–±–µ—Ä–∏ —Ç–∏–ø –∫–≤–µ—Å—Ç–∞:", reply_markup=get_quest_type_keyboard())
    else:
        await callback.message.answer("–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é")

@router.message(TimezoneSetup.waiting_for_local_time)
async def process_local_time(message: Message, state: FSMContext):
    txt = (message.text or "").strip()
    try:
        hh, mm = map(int, txt.split(":"))
        if not (0 <= hh <= 23 and 0 <= mm <= 59):
            raise ValueError
    except Exception:
        await message.answer("–§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ HH:MM, –Ω–∞–ø—Ä–∏–º–µ—Ä 14:05. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        return
    now_utc = datetime.utcnow()
    utc_minutes = now_utc.hour * 60 + now_utc.minute
    local_minutes = hh * 60 + mm
    diff = local_minutes - utc_minutes
    while diff <= -12*60:
        diff += 24*60
    while diff > 14*60:
        diff -= 24*60
    await db.set_user_timezone(message.from_user.id, diff)
    pending = (await state.get_data()).get("_pending_creation_after_tz")
    await state.clear()
    await message.answer("–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω", reply_markup=get_quests_menu_keyboard())
    if pending:
        await state.set_state(QuestCreation.waiting_for_type)
        await message.answer("–í—ã–±–µ—Ä–∏ —Ç–∏–ø –∫–≤–µ—Å—Ç–∞:", reply_markup=get_quest_type_keyboard())


@router.callback_query(F.data == "my_quests_inline")
async def cb_my_quests(callback: CallbackQuery):
    user_id = callback.from_user.id
    quests = await db.get_user_quests(user_id)
    if not quests:
        keyboard = [[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
        await callback.message.edit_text("üìã –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤!", reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))
        await callback.answer()
        return
    keyboard = []
    for quest in quests:
        quest_id = quest[0]
        title = quest[2]
        quest_type = quest[3]
        status_emoji = compute_status_emoji(quest[7])
        type_emoji = {"physical": "üí™", "intellectual": "üìö", "mental": "üß†", "custom": "üéØ"}.get(quest_type, "üéØ")
        keyboard.append([InlineKeyboardButton(text=f"{status_emoji} {type_emoji} {title}", callback_data=f"quest_{quest_id}")])
    await callback.message.edit_text("üìã –í—ã–±–µ—Ä–∏ –∫–≤–µ—Å—Ç:", reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))
    await callback.answer()


@router.message(QuestCreation.waiting_for_type)
async def select_quest_type(message: Message, state: FSMContext):
    mapping = {
        "üí™ –§–∏–∑–∏—á–µ—Å–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è": "physical",
        "üìö –ß—Ç–µ–Ω–∏–µ": "intellectual",
        "üß† –ú–µ–¥–∏—Ç–∞—Ü–∏—è": "mental",
        "üéØ –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –∫–≤–µ—Å—Ç": "custom",
    }
    quest_type = mapping.get(message.text)
    if not quest_type:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Ç–∏–ø –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ")
        return
    await state.update_data(quest_type=quest_type)
    if quest_type == "mental":
        await state.update_data(title="–ú–µ–¥–∏—Ç–∞—Ü–∏—è")
        await state.set_state(QuestCreation.waiting_for_minutes)
        await message.answer("–°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –º–µ–¥–∏—Ç–∞—Ü–∏–∏? (—á–∏—Å–ª–æ):", reply_markup=ReplyKeyboardRemove())
        return
    if quest_type == "intellectual":
        await state.set_state(QuestCreation.waiting_for_title)
        await message.answer("—Ç–∏–ø –∫–≤–µ—Å—Ç–∞: —á—Ç–µ–Ω–∏–µ\n\n–≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏:", reply_markup=ReplyKeyboardRemove())
        return
    await state.set_state(QuestCreation.waiting_for_title)
    await message.answer("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–≤–µ—Å—Ç–∞:", reply_markup=ReplyKeyboardRemove())


@router.message(QuestCreation.waiting_for_title)
async def process_quest_title(message: Message, state: FSMContext):
    title = message.text.strip()
    is_valid, error_msg = db.validate_input(title, "–ù–∞–∑–≤–∞–Ω–∏–µ")
    if not is_valid:
        await message.answer(f"‚ùå {error_msg}\n\n–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:")
        return
    await state.update_data(title=title)
    data = await state.get_data()
    quest_type = data.get("quest_type")
    if quest_type == "physical":
        await state.set_state(QuestCreation.waiting_for_reps)
        await message.answer(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n\n–í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –≤ –æ–¥–Ω–æ–º –ø–æ–¥—Ö–æ–¥–µ (—á–∏—Å–ª–æ):")
    elif quest_type == "intellectual":
        await state.set_state(QuestCreation.waiting_for_pages)
        await message.answer(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n\n–í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü (—á–∏—Å–ª–æ):")
    elif quest_type == "custom":
        await state.set_state(QuestCreation.waiting_for_progress)
        text = f"–ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n\n–£ –∫–≤–µ—Å—Ç–∞ –µ—Å—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å?"
        keyboard = [[
            InlineKeyboardButton(text="–î–∞", callback_data="custom_progress_yes"),
            InlineKeyboardButton(text="–ù–µ—Ç", callback_data="custom_progress_no")
        ]]
        await message.answer(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))


@router.message(QuestCreation.waiting_for_reps)
async def process_reps(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ")
        return
    reps = int(message.text)
    if reps <= 0:
        await message.answer("‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
        return
    await state.update_data(reps=reps)
    await state.set_state(QuestCreation.waiting_for_sets)
    await message.answer("–í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ö–æ–¥–æ–≤ (—á–∏—Å–ª–æ):")


@router.message(QuestCreation.waiting_for_sets)
async def process_sets(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ")
        return
    sets = int(message.text)
    if sets <= 0:
        await message.answer("‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
        return
    data = await state.get_data()
    reps = data.get("reps", 0)
    target_value = reps * sets
    await state.update_data(target_value=target_value)
    await state.set_state(QuestCreation.waiting_for_deadline_input)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="—Å–µ–≥–æ–¥–Ω—è", callback_data="deadline_today")],
        [InlineKeyboardButton(text="–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="deadline_skip_all")],
    ])
    await message.answer("–£–∫–∞–∂–∏ –¥–µ–¥–ª–∞–π–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ dd.mm.yy hh:mm –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ", reply_markup=kb)


@router.message(QuestCreation.waiting_for_pages)
async def process_pages(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ")
        return
    pages = int(message.text)
    if pages <= 0:
        await message.answer("‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
        return
    await state.update_data(target_value=pages)
    await state.set_state(QuestCreation.waiting_for_deadline_input)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="—Å–µ–≥–æ–¥–Ω—è", callback_data="deadline_today")],
        [InlineKeyboardButton(text="–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="deadline_skip_all")],
    ])
    await message.answer("–£–∫–∞–∂–∏ –¥–µ–¥–ª–∞–π–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ dd.mm.yy hh:mm –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ", reply_markup=kb)


@router.message(QuestCreation.waiting_for_minutes)
async def process_minutes(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ")
        return
    minutes = int(message.text)
    if minutes <= 0:
        await message.answer("‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
        return
    await state.update_data(target_value=minutes)
    await state.set_state(QuestCreation.waiting_for_deadline_input)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="—Å–µ–≥–æ–¥–Ω—è", callback_data="deadline_today")],
        [InlineKeyboardButton(text="–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="deadline_skip_all")],
    ])
    await message.answer("–£–∫–∞–∂–∏ –¥–µ–¥–ª–∞–π–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ dd.mm.yy hh:mm –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ", reply_markup=kb)


@router.callback_query(F.data.in_(["custom_progress_yes", "custom_progress_no"]))
async def cb_custom_progress(callback: CallbackQuery, state: FSMContext):
    has_progress = callback.data.endswith("yes")
    await state.update_data(target_value=(100 if has_progress else 0))
    await state.set_state(QuestCreation.waiting_for_deadline_input)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="—Å–µ–≥–æ–¥–Ω—è", callback_data="deadline_today")],
        [InlineKeyboardButton(text="–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="deadline_skip_all")],
    ])
    await callback.message.edit_text("–£–∫–∞–∂–∏ –¥–µ–¥–ª–∞–π–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ dd.mm.yy hh:mm –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ", reply_markup=kb)
    await callback.answer()


@router.callback_query(F.data == "skip_comment")
async def cb_skip_comment(callback: CallbackQuery, state: FSMContext):
    user = callback.from_user
    await db.add_user(user.id, user.first_name or user.username or "User")
    data = await state.get_data()
    quest_id, error = await db.create_quest(
        user_id=user.id,
        title=data["title"],
        quest_type=data["quest_type"],
        target_value=data["target_value"],
        comment=None,
        deadline=(await state.get_data()).get("deadline"),
        has_date=(await state.get_data()).get("has_date"),
        has_time=(await state.get_data()).get("has_time"),
    )
    if error:
        await state.clear()
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {error}")
    else:
        await state.clear()
        # –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∫–≤–µ—Å—Ç–∞
        if quest_id:
            quest = await db.get_quest(user.id, quest_id)
            if quest:
                tz_off, _ = await db.get_user_timezone(user.id)
                text = format_quest_text(quest, tz_off)
                completed = bool(quest[6])
                quest_type = quest[3]
                target_value = int(quest[4])
                await callback.message.edit_text(text, reply_markup=get_quest_detail_keyboard(quest_id, completed, quest_type, target_value), parse_mode="HTML")
                await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_quests_menu_keyboard())
                await callback.answer()
                return
        # Fallback: —Å–ø–∏—Å–æ–∫ –∫–≤–µ—Å—Ç–æ–≤
        quests = await db.get_user_quests(user.id)
        if not quests:
            await callback.message.edit_text("üìã –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤!")
        else:
            keyboard = []
            for q in quests:
                q_id = q[0]
                q_title = q[2]
                q_type = q[3]
                status_emoji = "‚ö™"
                type_emoji = {"physical": "üí™", "intellectual": "üìö", "mental": "üß†", "custom": "üéØ"}.get(q_type, "üéØ")
                keyboard.append([InlineKeyboardButton(text=f"{status_emoji} {type_emoji} {q_title}", callback_data=f"quest_{q_id}")])
            await callback.message.edit_text("üìã –í—ã–±–µ—Ä–∏ –∫–≤–µ—Å—Ç:", reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))
            await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_quests_menu_keyboard())
        await callback.answer()


@router.message(QuestCreation.waiting_for_comment)
async def process_quest_comment(message: Message, state: FSMContext):
    text = message.text.strip()
    data = await state.get_data()
    comment = text if comment_should_be_saved(text, None) else None
    if comment:
        is_valid, error_msg = db.validate_input(comment, "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
        if not is_valid:
            await message.answer(f"‚ùå {error_msg}")
            return
    await db.add_user(message.from_user.id, message.from_user.first_name or message.from_user.username or "User")
    quest_id, error = await db.create_quest(
        user_id=message.from_user.id,
        title=data["title"],
        quest_type=data["quest_type"],
        target_value=data["target_value"],
        comment=comment,
        deadline=(await state.get_data()).get("deadline"),
        has_date=(await state.get_data()).get("has_date"),
        has_time=(await state.get_data()).get("has_time"),
    )
    if error:
        await state.clear()
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {error}", reply_markup=get_quests_menu_keyboard())
        return
    await state.clear()
    # –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∫–≤–µ—Å—Ç–∞
    if quest_id:
        quest = await db.get_quest(message.from_user.id, quest_id)
        if quest:
            tz_off, _ = await db.get_user_timezone(message.from_user.id)
            text = format_quest_text(quest, tz_off)
            completed = bool(quest[6])
            quest_type = quest[3]
            target_value = int(quest[4])
            await message.answer(text, reply_markup=get_quest_detail_keyboard(quest_id, completed, quest_type, target_value), parse_mode="HTML")
            await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_quests_menu_keyboard())
            return
    # Fallback: —Å–ø–∏—Å–æ–∫ –∫–≤–µ—Å—Ç–æ–≤
    user_id = message.from_user.id
    quests = await db.get_user_quests(user_id)
    if not quests:
        await message.answer("üìã –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤!")
    else:
        keyboard = []
        for quest in quests:
            qid = quest[0]
            title = quest[2]
            qtype = quest[3]
            status_emoji = "‚ö™"
            type_emoji = {"physical": "üí™", "intellectual": "üìö", "mental": "üß†", "custom": "üéØ"}.get(qtype, "üéØ")
            keyboard.append([InlineKeyboardButton(text=f"{status_emoji} {type_emoji} {title}", callback_data=f"quest_{qid}")])
        await message.answer("üìã –í—ã–±–µ—Ä–∏ –∫–≤–µ—Å—Ç:", reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_quests_menu_keyboard())


# ===== –î–µ–¥–ª–∞–π–Ω: –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –∏ –≤–≤–æ–¥–∞ =====
@router.message(QuestCreation.waiting_for_deadline_input)
async def process_deadline_input(message: Message, state: FSMContext):
    text = (message.text or "").strip()
    parts = text.split()
    if len(parts) not in (1, 2):
        await message.answer("–§–æ—Ä–º–∞—Ç: dd.mm.yy –∏–ª–∏ dd.mm.yy hh:mm")
        return
    try:
        local_date = datetime.strptime(parts[0], "%d.%m.%y")
    except Exception:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –§–æ—Ä–º–∞—Ç: dd.mm.yy")
        return
    hh = mm = None
    if len(parts) == 2:
        try:
            hh, mm = map(int, parts[1].split(":"))
            if not (0 <= hh <= 23 and 0 <= mm <= 59):
                raise ValueError
        except Exception:
            await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è. –§–æ—Ä–º–∞—Ç: hh:mm")
            return
    tz_off, _ = await db.get_user_timezone(message.from_user.id)
    h = hh if hh is not None else 0
    m = mm if mm is not None else 0
    dt_local = datetime(local_date.year, local_date.month, local_date.day, h, m, 0)
    if tz_off is None:
        dt_utc_str = dt_local.strftime("%Y-%m-%d %H:%M:%S")
    else:
        dt_utc = dt_local - timedelta(minutes=int(tz_off))
        dt_utc_str = dt_utc.strftime("%Y-%m-%d %H:%M:%S")
    await state.update_data(deadline=dt_utc_str)
    await state.update_data(has_date=True, has_time=(hh is not None))
    logger.info(f"[DEADLINE] manual parsed -> local={dt_local}, utc_str='{dt_utc_str}', tz_off={tz_off}")
    await state.set_state(QuestCreation.waiting_for_comment)
    keyboard = [[InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_comment")]]
    await message.answer("–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ–º)", reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))


@router.callback_query(F.data == "deadline_today")
async def cb_deadline_today(callback: CallbackQuery, state: FSMContext):
    tz_off, _ = await db.get_user_timezone(callback.from_user.id)
    now_utc = datetime.utcnow()
    local_now = now_utc + timedelta(minutes=int(tz_off)) if tz_off is not None else now_utc
    logger.info(f"[DEADLINE] button today pressed, tz_off={tz_off}, local_now={local_now}")
    await state.update_data(_deadline_local_date=(local_now.year, local_now.month, local_now.day))
    await state.set_state(QuestCreation.waiting_for_deadline_time)
    kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="deadline_time_skip")]])
    await callback.message.edit_text("–í–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ hh:mm (–∏–ª–∏ –Ω–∞–∂–º–∏ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å)", reply_markup=kb)
    await callback.answer()


@router.callback_query(F.data == "deadline_time_skip")
async def cb_deadline_time_skip(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    y, m, d = data.get("_deadline_local_date")
    tz_off, _ = await db.get_user_timezone(callback.from_user.id)
    dt_local = datetime(y, m, d, 0, 0, 0)
    if tz_off is None:
        dt_utc_str = dt_local.strftime("%Y-%m-%d %H:%M:%S")
    else:
        dt_utc = dt_local - timedelta(minutes=int(tz_off))
        dt_utc_str = dt_utc.strftime("%Y-%m-%d %H:%M:%S")
    await state.update_data(deadline=dt_utc_str)
    await state.update_data(has_date=True, has_time=False)
    logger.info(f"[DEADLINE] time skipped -> local={dt_local}, utc_str='{dt_utc_str}', tz_off={tz_off}")
    await state.set_state(QuestCreation.waiting_for_comment)
    keyboard = [[InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_comment")]]
    await callback.message.edit_text("üìå –î–µ–¥–ª–∞–π–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: —Å–µ–≥–æ–¥–Ω—è, –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏.\n\n–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ–º)", reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))
    await callback.answer()


@router.message(QuestCreation.waiting_for_deadline_time)
async def process_deadline_time(message: Message, state: FSMContext):
    data = await state.get_data()
    try:
        hh, mm = map(int, (message.text or "").strip().split(":"))
        if not (0 <= hh <= 23 and 0 <= mm <= 59):
            raise ValueError
    except Exception:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è. –§–æ—Ä–º–∞—Ç: hh:mm")
        return
    y, m, d = data.get("_deadline_local_date")
    tz_off, _ = await db.get_user_timezone(message.from_user.id)
    dt_local = datetime(y, m, d, hh, mm, 0)
    if tz_off is None:
        dt_utc_str = dt_local.strftime("%Y-%m-%d %H:%M:%S")
    else:
        dt_utc = dt_local - timedelta(minutes=int(tz_off))
        dt_utc_str = dt_utc.strftime("%Y-%m-%d %H:%M:%S")
    await state.update_data(deadline=dt_utc_str)
    await state.update_data(has_date=True, has_time=True)
    logger.info(f"[DEADLINE] time set -> local={dt_local}, utc_str='{dt_utc_str}', tz_off={tz_off}")
    await state.set_state(QuestCreation.waiting_for_comment)
    keyboard = [[InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_comment")]]
    shown_time = f"{hh:02d}:{mm:02d}"
    await message.answer(f"üìå –î–µ–¥–ª–∞–π–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: —Å–µ–≥–æ–¥–Ω—è, {shown_time}.\n\n–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ–º)", reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))


@router.callback_query(F.data == "deadline_skip_all")
async def cb_deadline_skip_all(callback: CallbackQuery, state: FSMContext):
    await state.update_data(deadline=None, has_date=False, has_time=False)
    await state.set_state(QuestCreation.waiting_for_comment)
    keyboard = [[InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_comment")]]
    await callback.message.edit_text("–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ–º)", reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))
    await callback.answer()

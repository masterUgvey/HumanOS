"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Telegram-–±–æ—Ç–∞ –Ω–∞ aiogram 3.x
–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""

import asyncio
import sys
from loguru import logger
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage

from config import config
from database_async import db
from handlers import router
from datetime import datetime, timedelta, timezone

# –û—á–µ—Ä–µ–¥—å –¥–ª—è RT-–ª–æ–≥–æ–≤
LOG_QUEUE: asyncio.Queue | None = None

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ –ø–∞–º—è—Ç–∏: {quest_id: {"h1": bool, "overdue": bool}}
REMINDER_STATE = {}


async def reminder_loop(bot: Bot):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: —Ä–∞—Å—Å—ã–ª–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ —á–∞—Å –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞ –∏ –ø–æ –ø—Ä–æ—Å—Ä–æ—á–∫–µ"""
    global REMINDER_STATE
    while True:
        try:
            quests = await db.get_quests_with_deadlines()
            now_utc = datetime.now(timezone.utc)
            for q in quests:
                # –ü–æ—Ä—è–¥–æ–∫: quest_id(0), user_id(1), title(2), quest_type(3), target(4), current(5),
                # completed(6), deadline(7), comment(8), created_at(9), has_date(10), has_time(11)
                quest_id, user_id, title = q[0], q[1], q[2]
                completed = bool(q[6])
                deadline_str = q[7]
                has_date = bool(q[10]) if len(q) > 10 else True
                if completed or not deadline_str or not has_date:
                    continue
                try:
                    dt_deadline_utc = datetime.strptime(deadline_str, "%Y-%m-%d %H:%M:%S").replace(tzinfo=timezone.utc)
                except Exception:
                    continue
                delta = dt_deadline_utc - now_utc
                state = REMINDER_STATE.setdefault(quest_id, {"h1": False, "overdue": False})
                # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ —á–∞—Å
                if 0 <= delta.total_seconds() <= 3600 and not state["h1"]:
                    tz_off, _ = await db.get_user_timezone(user_id)
                    dt_local = dt_deadline_utc + timedelta(minutes=int(tz_off or 0))
                    time_str = dt_local.strftime("%H:%M")
                    date_str = dt_local.strftime("%d.%m.%y")
                    try:
                        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
                        kb = InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(text="üîé –û—Ç–∫—Ä—ã—Ç—å –∫–≤–µ—Å—Ç", callback_data=f"quest_{quest_id}")],
                            [InlineKeyboardButton(text="üìã –ö–≤–µ—Å—Ç—ã", callback_data="my_quests_inline")],
                        ])
                        await bot.send_message(user_id, f"üü° –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞ –∫–≤–µ—Å—Ç–∞ ¬´{title}¬ª –æ—Å—Ç–∞–ª—Å—è 1 —á–∞—Å.\n–î–µ–¥–ª–∞–π–Ω: {date_str} {time_str}", reply_markup=kb)
                        state["h1"] = True
                    except Exception:
                        pass
                # –ü—Ä–æ—Å—Ä–æ—á–∫–∞
                if delta.total_seconds() < 0 and not state["overdue"]:
                    tz_off, _ = await db.get_user_timezone(user_id)
                    dt_local = dt_deadline_utc + timedelta(minutes=int(tz_off or 0))
                    time_str = dt_local.strftime("%H:%M")
                    date_str = dt_local.strftime("%d.%m.%y")
                    try:
                        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
                        kb = InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(text="üîé –û—Ç–∫—Ä—ã—Ç—å –∫–≤–µ—Å—Ç", callback_data=f"quest_{quest_id}")],
                            [InlineKeyboardButton(text="üìã –ö–≤–µ—Å—Ç—ã", callback_data="my_quests_inline")],
                        ])
                        await bot.send_message(user_id, f"üî¥ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω –¥–µ–¥–ª–∞–π–Ω –ø–æ –∫–≤–µ—Å—Ç—É ¬´{title}¬ª.\n–î–µ–¥–ª–∞–π–Ω –±—ã–ª: {date_str} {time_str}", reply_markup=kb)
                        state["overdue"] = True
                    except Exception:
                        pass
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
            await asyncio.sleep(60)
        except asyncio.CancelledError:
            break
        except Exception as e:
            logger.warning(f"Reminder loop error: {e}")
            await asyncio.sleep(60)


async def on_startup(bot: Bot):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await db.init_db()
    logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞")
    # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    bot.reminder_task = asyncio.create_task(reminder_loop(bot))
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ RT-–ª–æ–≥–æ–≤
    global LOG_QUEUE
    LOG_QUEUE = asyncio.Queue()
    loop = asyncio.get_running_loop()

    def _sink(message):
        try:
            loop.call_soon_threadsafe(LOG_QUEUE.put_nowait, str(message))
        except Exception:
            pass

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π sink –¥–ª—è –ª–æ–≥–æ–≤ (–æ—Å—Ç–∞–≤–ª—è–µ–º stderr –∏ —Ñ–∞–π–ª –∫–∞–∫ –µ—Å—Ç—å)
    bot.log_sink_id = logger.add(_sink, level="INFO")

    async def _log_dispatcher():
        while True:
            try:
                line = await LOG_QUEUE.get()
                subs = await db.get_log_subscribers()
                if not subs:
                    continue
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏, –±–µ–∑ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã—Ö
                text = line[-800:]
                for uid in subs:
                    try:
                        await bot.send_message(uid, f"üìü {text}")
                    except Exception:
                        pass
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.warning(f"log dispatcher error: {e}")
                await asyncio.sleep(0.5)

    bot.log_task = asyncio.create_task(_log_dispatcher())


async def on_shutdown(bot: Bot):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞"""
    logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
    # –£–±–∏—Ä–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π sink, —á—Ç–æ–±—ã –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É RT-–ª–æ–≥–æ–≤
    sink_id = getattr(bot, "log_sink_id", None)
    if sink_id is not None:
        try:
            logger.remove(sink_id)
        except Exception:
            pass
    # –û—Å—Ç–∞–Ω–æ–≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
    task = getattr(bot, "reminder_task", None)
    if task:
        task.cancel()
        try:
            await task
        except Exception:
            pass
    # –û—Å—Ç–∞–Ω–æ–≤ –ª–æ–≥-–¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    ltask = getattr(bot, "log_task", None)
    if ltask:
        ltask.cancel()
        try:
            await ltask
        except Exception:
            pass
    # –û–±–Ω—É–ª—è–µ–º –æ—á–µ—Ä–µ–¥—å –ª–æ–≥–æ–≤
    global LOG_QUEUE
    LOG_QUEUE = None


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logger.remove()  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    logger.add(
        sys.stderr,
        format="<green>{time:YYYY-MM-DD HH:mm:ss}</green> | <level>{level: <8}</level> | <cyan>{name}</cyan>:<cyan>{function}</cyan> - <level>{message}</level>",
        level=config.LOG_LEVEL
    )
    logger.add(
        "bot.log",
        rotation="10 MB",
        retention="7 days",
        level="INFO",
        format="{time:YYYY-MM-DD HH:mm:ss} | {level: <8} | {name}:{function} - {message}"
    )
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if not config.validate():
        logger.error("‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env")
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    bot = Bot(token=config.BOT_TOKEN)
    storage = MemoryStorage()
    dp = Dispatcher(storage=storage)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞ —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
    dp.include_router(router)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è startup/shutdown —Ñ—É–Ω–∫—Ü–∏–π
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)
    
    try:
        logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        logger.info(f"üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {config.DATABASE_PATH}")
        logger.info(f"ü§ñ AI: {'–í–∫–ª—é—á–µ–Ω' if config.WINDSURF_API_KEY else '–í—ã–∫–ª—é—á–µ–Ω'}")
        await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
    except asyncio.CancelledError:
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞: polling –æ—Ç–º–µ–Ω–µ–Ω")
    except KeyboardInterrupt:
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞: –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    
    finally:
        try:
            await dp.storage.close()
            await dp.storage.wait_closed()
        except Exception:
            pass
        await bot.session.close()
        logger.info("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, asyncio.CancelledError):
        pass

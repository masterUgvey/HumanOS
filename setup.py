"""
–°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, —Å–æ–∑–¥–∞–µ—Ç .env —Ñ–∞–π–ª, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
"""

import os
import sys
import subprocess
import shutil
from pathlib import Path


def print_step(message):
    """–ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ —à–∞–≥–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    print(f"\n{'='*60}")
    print(f"  {message}")
    print(f"{'='*60}\n")


def check_python_version():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python"""
    print_step("üêç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python")
    
    version = sys.version_info
    if version.major < 3 or (version.major == 3 and version.minor < 11):
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.11 –∏–ª–∏ –≤—ã—à–µ!")
        print(f"   –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {version.major}.{version.minor}.{version.micro}")
        return False
    
    print(f"‚úÖ Python {version.major}.{version.minor}.{version.micro} - OK")
    return True


def install_dependencies():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏–∑ requirements.txt"""
    print_step("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
    
    if not os.path.exists("requirements.txt"):
        print("‚ùå –§–∞–π–ª requirements.txt –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    try:
        print("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–æ–≤...")
        subprocess.check_call([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"])
        print("\n‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")
        return False


def create_env_file():
    """–°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞ –∏–∑ .env.example"""
    print_step("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    
    if os.path.exists(".env"):
        response = input("–§–∞–π–ª .env —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å? (y/N): ")
        if response.lower() != 'y':
            print("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è .env —Ñ–∞–π–ª–∞")
            return True
    
    if not os.path.exists(".env.example"):
        print("‚ùå –§–∞–π–ª .env.example –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    try:
        shutil.copy(".env.example", ".env")
        print("‚úÖ –§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω –∏–∑ .env.example")
        print("\n‚ö†Ô∏è –í–ê–ñ–ù–û: –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª .env –∏ —É–∫–∞–∂–∏—Ç–µ:")
        print("   1. BOT_TOKEN - —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ Telegram-–±–æ—Ç–∞")
        print("   2. WINDSURF_API_KEY - API –∫–ª—é—á Windsurf AI (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")
        print("\nüìù –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –±–æ—Ç–∞:")
        print("   1. –û—Ç–∫—Ä–æ–π—Ç–µ Telegram –∏ –Ω–∞–π–¥–∏—Ç–µ @BotFather")
        print("   2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /newbot")
        print("   3. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º")
        print("   4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –≤ .env —Ñ–∞–π–ª")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ .env —Ñ–∞–π–ª–∞: {e}")
        return False


def verify_env_file():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ .env"""
    print_step("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    
    if not os.path.exists(".env"):
        print("‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω! –ó–∞–ø—É—Å—Ç–∏—Ç–µ setup.py –µ—â–µ —Ä–∞–∑.")
        return False
    
    with open(".env", "r", encoding="utf-8") as f:
        content = f.read()
    
    if "your_telegram_bot_token_here" in content:
        print("‚ö†Ô∏è BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        print("   –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª .env –∏ —É–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞")
        return False
    
    print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤—ã–≥–ª—è–¥–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    return True


def create_gitignore():
    """–°–æ–∑–¥–∞–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ .gitignore"""
    print_step("üìÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ .gitignore")
    
    gitignore_content = """# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
venv/
env/
ENV/

# Environment variables
.env

# Database
*.db
*.sqlite
*.sqlite3

# Logs
*.log
bot.log

# IDE
.vscode/
.idea/
*.swp
*.swo

# OS
.DS_Store
Thumbs.db

# Project specific
quests.db
quests_new.db
output.log
"""
    
    try:
        with open(".gitignore", "w", encoding="utf-8") as f:
            f.write(gitignore_content)
        print("‚úÖ –§–∞–π–ª .gitignore —Å–æ–∑–¥–∞–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω")
        return True
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å .gitignore: {e}")
        return True  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ


def test_imports():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π"""
    print_step("üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π")
    
    modules = [
        "aiogram",
        "aiohttp",
        "aiosqlite",
        "dotenv",
        "loguru"
    ]
    
    all_ok = True
    for module in modules:
        try:
            __import__(module)
            print(f"‚úÖ {module}")
        except ImportError:
            print(f"‚ùå {module} - –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            all_ok = False
    
    return all_ok


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    print("""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                                                           ‚ïë
‚ïë        üöÄ HumanOS Bot - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ üöÄ       ‚ïë
‚ïë                                                           ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python
    if not check_python_version():
        sys.exit(1)
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    if not install_dependencies():
        print("\n‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫")
        sys.exit(1)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞
    if not create_env_file():
        print("\n‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫")
        sys.exit(1)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ .gitignore
    create_gitignore()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
    if not test_imports():
        print("\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –º–æ–¥—É–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("   –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:")
        print("   pip install -r requirements.txt --force-reinstall")
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    print_step("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    
    print("""
üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:

1. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª .env –∏ —É–∫–∞–∂–∏—Ç–µ BOT_TOKEN
   
2. (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –£–∫–∞–∂–∏—Ç–µ WINDSURF_API_KEY –¥–ª—è AI —Ñ—É–Ω–∫—Ü–∏–π

3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞:
   python main.py

4. –û—Ç–∫—Ä–æ–π—Ç–µ Telegram –∏ –Ω–∞–π–¥–∏—Ç–µ —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞

5. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start

üìö –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ README.md

–£–¥–∞—á–∏! üéâ
    """)


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

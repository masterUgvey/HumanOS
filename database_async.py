"""
–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö SQLite
–£–ø—Ä–∞–≤–ª—è–µ—Ç –∫–≤–µ—Å—Ç–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –¥–∞–Ω–Ω—ã—Ö
"""

import re
import aiosqlite
from datetime import datetime
from typing import Optional, Tuple, List
from loguru import logger
from config import config


class Database:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤"""
    
    def __init__(self, db_path: str = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            db_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ config)
        """
        self.db_path = db_path or config.DATABASE_PATH
        logger.info(f"üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {self.db_path}")
    
    async def init_db(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        async with aiosqlite.connect(self.db_path) as db:
            # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            await db.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    user_id INTEGER PRIMARY KEY,
                    username TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    tz_offset_minutes INTEGER,
                    tz_prompted BOOLEAN DEFAULT FALSE
                )
            ''')

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã —Ç–∞–±–ª–∏—Ü—ã quests
            cursor = await db.execute("PRAGMA table_info('quests')")
            existing_columns_info = await cursor.fetchall()
            existing_columns = {row[1] for row in existing_columns_info}  # name at index 1

            if not existing_columns:
                # –¢–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî —Å–æ–∑–¥–∞–µ–º –ø–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Å—Ö–µ–º–µ
                await db.execute('''
                    CREATE TABLE IF NOT EXISTS quests (
                        quest_id INTEGER PRIMARY KEY AUTOINCREMENT,
                        user_id INTEGER,
                        title TEXT NOT NULL,
                        quest_type TEXT NOT NULL,
                        target_value INTEGER NOT NULL,
                        current_value INTEGER DEFAULT 0,
                        completed BOOLEAN DEFAULT FALSE,
                        deadline TIMESTAMP,
                        comment TEXT,
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        has_date BOOLEAN DEFAULT FALSE,
                        has_time BOOLEAN DEFAULT FALSE,
                        FOREIGN KEY (user_id) REFERENCES users (user_id)
                    )
                ''')
            else:
                # –õ–µ–≥–∫–∞—è –º–∏–≥—Ä–∞—Ü–∏—è: –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
                migrations = []
                if 'current_value' not in existing_columns:
                    migrations.append("ALTER TABLE quests ADD COLUMN current_value INTEGER DEFAULT 0")
                if 'completed' not in existing_columns:
                    migrations.append("ALTER TABLE quests ADD COLUMN completed BOOLEAN DEFAULT FALSE")
                if 'deadline' not in existing_columns:
                    migrations.append("ALTER TABLE quests ADD COLUMN deadline TIMESTAMP")
                if 'comment' not in existing_columns:
                    migrations.append("ALTER TABLE quests ADD COLUMN comment TEXT")
                if 'has_date' not in existing_columns:
                    migrations.append("ALTER TABLE quests ADD COLUMN has_date BOOLEAN DEFAULT FALSE")
                if 'has_time' not in existing_columns:
                    migrations.append("ALTER TABLE quests ADD COLUMN has_time BOOLEAN DEFAULT FALSE")

                for sql in migrations:
                    try:
                        await db.execute(sql)
                        logger.info(f"üß© –ü—Ä–∏–º–µ–Ω–µ–Ω–∞ –º–∏–≥—Ä–∞—Ü–∏—è: {sql}")
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ '{sql}': {e}")

                if migrations:
                    # –ü—Ä–æ—Å—Ç–∞–≤–∏–º –¥–µ—Ñ–æ–ª—Ç—ã —Ç–∞–º, –≥–¥–µ NULL –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
                    try:
                        await db.execute("UPDATE quests SET current_value = COALESCE(current_value, 0)")
                        await db.execute("UPDATE quests SET completed = COALESCE(completed, FALSE)")
                        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–ª–∞–≥–∏ –¥–∞—Ç/–≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –¥–µ–¥–ª–∞–π–Ω–∞
                        await db.execute("UPDATE quests SET has_date = CASE WHEN deadline IS NOT NULL THEN TRUE ELSE FALSE END WHERE has_date IS NULL OR has_date = FALSE")
                        await db.execute("UPDATE quests SET has_time = CASE WHEN deadline IS NOT NULL AND TIME(deadline) != '00:00:00' THEN TRUE ELSE FALSE END WHERE has_time IS NULL OR has_time = FALSE")
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {e}")

            # –ú–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã users
            try:
                cursor_u = await db.execute("PRAGMA table_info('users')")
                cols_u_info = await cursor_u.fetchall()
                cols_u = {row[1] for row in cols_u_info}
                if 'tz_offset_minutes' not in cols_u:
                    await db.execute("ALTER TABLE users ADD COLUMN tz_offset_minutes INTEGER")
                if 'tz_prompted' not in cols_u:
                    await db.execute("ALTER TABLE users ADD COLUMN tz_prompted BOOLEAN DEFAULT FALSE")
                if 'log_subscribed' not in cols_u:
                    await db.execute("ALTER TABLE users ADD COLUMN log_subscribed BOOLEAN DEFAULT FALSE")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ users: {e}")

            await db.commit()
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def validate_input(self, text: str, field_name: str = "input") -> Tuple[bool, str]:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ –Ω–∞ SQL-–∏–Ω—ä–µ–∫—Ü–∏–∏ –∏ –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        
        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            field_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è (–¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ)
            
        Returns:
            Tuple[bool, str]: (–≤–∞–ª–∏–¥–µ–Ω –ª–∏ –≤–≤–æ–¥, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ)
        """
        if not text:
            return False, "–ü–æ–ª–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ SQL-–∏–Ω—ä–µ–∫—Ü–∏–∏
        dangerous_patterns = [
            r"(--|;|'|\"|\\|/\*|\*/|xp_|sp_|exec|execute|select|insert|update|delete|drop|create|alter|union|script|javascript|<script)",
            r"(\bor\b.*=|\band\b.*=|\bselect\b|\bunion\b|\binsert\b|\bupdate\b|\bdelete\b|\bdrop\b)"
        ]
        
        text_lower = text.lower()
        for pattern in dangerous_patterns:
            if re.search(pattern, text_lower, re.IGNORECASE):
                return False, f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–ª—è –ø–æ–ª—è '{field_name}'. –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã."
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã
        if len(text) > 500:
            return False, f"–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤)"
        
        return True, ""
    
    async def add_user(self, user_id: int, username: str):
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
            username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        async with aiosqlite.connect(self.db_path) as db:
            await db.execute(
                'INSERT OR IGNORE INTO users (user_id, username) VALUES (?, ?)',
                (user_id, username)
            )
            await db.commit()
            logger.debug(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) –¥–æ–±–∞–≤–ª–µ–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω")

    async def get_user_timezone(self, user_id: int) -> Tuple[Optional[int], bool]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–º–µ—â–µ–Ω–∏–µ —Ç–∞–π–º–∑–æ–Ω—ã –∏ –ø—Ä–∏–∑–Ω–∞–∫, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ —Å–ø—Ä–∞—à–∏–≤–∞–ª–∏"""
        async with aiosqlite.connect(self.db_path) as db:
            cursor = await db.execute('SELECT tz_offset_minutes, COALESCE(tz_prompted, FALSE) FROM users WHERE user_id = ?', (user_id,))
            row = await cursor.fetchone()
            if not row:
                return None, False
            return row[0], bool(row[1])

    async def set_user_timezone(self, user_id: int, offset_minutes: int) -> None:
        async with aiosqlite.connect(self.db_path) as db:
            await db.execute('UPDATE users SET tz_offset_minutes = ?, tz_prompted = TRUE WHERE user_id = ?', (offset_minutes, user_id))
            await db.commit()

    async def set_user_tz_prompted(self, user_id: int) -> None:
        async with aiosqlite.connect(self.db_path) as db:
            await db.execute('UPDATE users SET tz_prompted = TRUE WHERE user_id = ?', (user_id,))
            await db.commit()

    async def set_log_subscription(self, user_id: int, subscribed: bool) -> None:
        """–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ RT-–ª–æ–≥–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with aiosqlite.connect(self.db_path) as db:
            await db.execute('UPDATE users SET log_subscribed = ? WHERE user_id = ?', (int(bool(subscribed)), user_id))
            await db.commit()

    async def get_log_subscribers(self) -> List[int]:
        """–ü–æ–ª—É—á–∏—Ç—å user_id –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –ª–æ–≥–æ–≤"""
        async with aiosqlite.connect(self.db_path) as db:
            cursor = await db.execute('SELECT user_id FROM users WHERE COALESCE(log_subscribed, FALSE) = TRUE')
            rows = await cursor.fetchall()
            return [r[0] for r in rows]
    
    async def create_quest(
        self,
        user_id: int,
        title: str,
        quest_type: str,
        target_value: int,
        deadline: Optional[str] = None,
        comment: Optional[str] = None,
        has_date: Optional[bool] = None,
        has_time: Optional[bool] = None
    ) -> Tuple[Optional[int], Optional[str]]:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–≤–µ—Å—Ç–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            title: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–≤–µ—Å—Ç–∞
            quest_type: –¢–∏–ø –∫–≤–µ—Å—Ç–∞ (physical, intellectual, mental, custom)
            target_value: –¶–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            deadline: –î–µ–¥–ª–∞–π–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            comment: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            Tuple[Optional[int], Optional[str]]: (ID –∫–≤–µ—Å—Ç–∞, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ)
        """
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
        is_valid, error_msg = self.validate_input(title, "–ù–∞–∑–≤–∞–Ω–∏–µ")
        if not is_valid:
            return None, error_msg
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        if comment:
            is_valid, error_msg = self.validate_input(comment, "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
            if not is_valid:
                return None, error_msg
        
        try:
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            if not deadline or str(deadline).strip() == "" or str(deadline).strip().lower() in {"none", "null", "0"}:
                deadline = None
            else:
                # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–∞—Ç–∞, –ø—Ä–∏–≤–æ–¥–∏–º –∫ 'YYYY-MM-DD 00:00:00'
                d_str = str(deadline).strip()
                if re.fullmatch(r"\d{4}-\d{2}-\d{2}$", d_str):
                    deadline = f"{d_str} 00:00:00"
            # –í—ã—á–∏—Å–ª–∏–º —Ñ–ª–∞–≥–∏ has_date/has_time, –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã
            if has_date is None or has_time is None:
                if deadline is None:
                    has_date = False if has_date is None else has_date
                    has_time = False if has_time is None else has_time
                else:
                    # deadline c –≤—Ä–µ–º–µ–Ω–µ–º –∏–ª–∏ –±–µ–∑
                    try:
                        tpart = str(deadline).strip().split(" ")[1] if " " in str(deadline).strip() else "00:00:00"
                    except Exception:
                        tpart = "00:00:00"
                    if has_date is None:
                        has_date = True
                    if has_time is None:
                        has_time = (tpart != "00:00:00")
            # –ï—Å–ª–∏ —Ñ–ª–∞–≥–∏ —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω—ã –∏ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∞—Ç deadline, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º:
            if not has_date:
                deadline = None
            elif has_date and not has_time and deadline:
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω—É–ª—è–µ–º –≤—Ä–µ–º—è, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ
                try:
                    d = datetime.strptime(deadline, "%Y-%m-%d %H:%M:%S")
                    deadline = f"{d.strftime('%Y-%m-%d')} 00:00:00"
                except Exception:
                    pass
            # –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –µ—Å–ª–∏ –æ–Ω –ø—É—Å—Ç–æ–π –∏–ª–∏ –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ –¥–∞—Ç–∞/–¥–∞—Ç–∞-–≤—Ä–µ–º—è
            if comment is not None:
                c = str(comment).strip()
                if c == "":
                    comment = None
                else:
                    date_like = [
                        r"^\d{4}-\d{2}-\d{2}$",
                        r"^\d{4}-\d{2}-\d{2} \d{2}:\d{2}$",
                        r"^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$",
                        r"^\d{2}\.\d{2}\.\d{2}$",
                        r"^\d{2}\.\d{2}\.\d{2} \d{2}:\d{2}$",
                    ]
                    if any(re.fullmatch(p, c) for p in date_like) or (deadline and c == str(deadline)):
                        comment = None
            logger.info(f"[DB] create_quest normalized -> user_id={user_id}, title='{title}', type='{quest_type}', target={target_value}, deadline='{deadline}', comment='{comment}', has_date={has_date}, has_time={has_time}")
            async with aiosqlite.connect(self.db_path) as db:
                cursor = await db.execute(
                    '''INSERT INTO quests (user_id, title, quest_type, target_value, deadline, comment, has_date, has_time) 
                       VALUES (?, ?, ?, ?, ?, ?, ?, ?)''',
                    (user_id, title, quest_type, target_value, deadline, comment, int(bool(has_date)), int(bool(has_time)))
                )
                quest_id = cursor.lastrowid
                await db.commit()
                logger.info(f"‚úÖ –ö–≤–µ—Å—Ç '{title}' —Å–æ–∑–¥–∞–Ω (ID: {quest_id}) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return quest_id, None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–≤–µ—Å—Ç–∞: {e}")
            return None, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–≤–µ—Å—Ç–∞"
    
    async def get_user_quests(self, user_id: int) -> List[tuple]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            List[tuple]: –°–ø–∏—Å–æ–∫ –∫–≤–µ—Å—Ç–æ–≤
        """
        async with aiosqlite.connect(self.db_path) as db:
            cursor = await db.execute(
                'SELECT quest_id, user_id, title, quest_type, target_value, current_value, completed, deadline, comment, created_at, has_date, has_time '
                'FROM quests WHERE user_id = ? AND completed = FALSE ORDER BY created_at DESC',
                (user_id,)
            )
            quests = await cursor.fetchall()
            return quests

    async def sanitize_existing_data(self) -> None:
        """–ü—Ä–∏–≤–µ—Å—Ç–∏ –ë–î –≤ –ø–æ—Ä—è–¥–æ–∫:
        - –£–¥–∞–ª–∏—Ç—å –¥–∞—Ç–æ–ø–æ–¥–æ–±–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        - –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–µ–¥–ª–∞–π–Ω—ã —Å —Ç–æ–ª—å–∫–æ –¥–∞—Ç–æ–π -> 'YYYY-MM-DD 00:00:00'
        - –ò—Å–ø—Ä–∞–≤–∏—Ç—å –±–∞–≥ '–≤—á–µ—Ä–∞ + –≤—Ä–µ–º—è' –Ω–∞ –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è '00:00:00'
        """
        async with aiosqlite.connect(self.db_path) as db:
            total = 0
            # 1) –£–¥–∞–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –ø–æ—Ö–æ–∂–∏–µ –Ω–∞ –¥–∞—Ç—É, –∏–ª–∏ —Å–æ–≤–ø–∞–¥–∞—é—â–∏–µ —Å –¥–µ–¥–ª–∞–π–Ω–æ–º
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º GLOB/LIKE –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è REGEXP –≤ SQLite –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            res = await db.execute(
                """
                UPDATE quests
                SET comment = NULL
                WHERE comment IS NOT NULL AND (
                    comment = deadline OR
                    comment GLOB '____-__-__' OR
                    comment GLOB '____-__-__ *__:__*' OR
                    comment GLOB '__.__.__' OR
                    comment GLOB '__.__.__ *__:__*'
                )
                """
            )
            c1 = res.rowcount if res.rowcount is not None else 0
            total += c1
            logger.info(f"[SANITIZE] cleared date-like comments: {c1}")

            # 2) –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–µ–¥–ª–∞–π–Ω—ã, –≥–¥–µ —É–∫–∞–∑–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–∞—Ç–∞ (10 —Å–∏–º–≤–æ–ª–æ–≤)
            res = await db.execute(
                """
                UPDATE quests
                SET deadline = deadline || ' 00:00:00'
                WHERE deadline IS NOT NULL AND LENGTH(deadline) = 10 AND deadline GLOB '____-__-__'
                """
            )
            c2 = res.rowcount if res.rowcount is not None else 0
            total += c2
            logger.info(f"[SANITIZE] normalized pure date deadlines to 00:00:00: {c2}")

            # 3) –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥–µ–¥–ª–∞–π–Ω—ã —Å–æ —Å–¥–≤–∏–≥–æ–º –Ω–∞ '–≤—á–µ—Ä–∞' —Å –≤—Ä–µ–º–µ–Ω–µ–º ‚Äî —Å—Ç–∞–≤–∏–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è 00:00:00
            # –ü—Ä–∏–∑–Ω–∞–∫ –±–∞–≥–∞: date(deadline) = date(created_at, '-1 day') –∏ time(deadline) != '00:00:00'
            res = await db.execute(
                """
                UPDATE quests
                SET deadline = DATE(created_at) || ' 00:00:00'
                WHERE deadline IS NOT NULL
                  AND TIME(deadline) != '00:00:00'
                  AND DATE(deadline) = DATE(created_at, '-1 day')
                """
            )
            c3 = res.rowcount if res.rowcount is not None else 0
            total += c3
            logger.info(f"[SANITIZE] fixed previous-day-with-time deadlines: {c3}")

            await db.commit()
            logger.info(f"[SANITIZE] done. total rows affected: {total}")
    
    async def get_quest(self, user_id: int, quest_id: int) -> Optional[tuple]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–≤–µ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            quest_id: ID –∫–≤–µ—Å—Ç–∞
            
        Returns:
            Optional[tuple]: –î–∞–Ω–Ω—ã–µ –∫–≤–µ—Å—Ç–∞ –∏–ª–∏ None
        """
        async with aiosqlite.connect(self.db_path) as db:
            cursor = await db.execute(
                'SELECT quest_id, user_id, title, quest_type, target_value, current_value, completed, deadline, comment, created_at, has_date, has_time '
                'FROM quests WHERE quest_id = ? AND user_id = ?',
                (quest_id, user_id)
            )
            quest = await cursor.fetchone()
            return quest
    
    async def update_quest_progress(
        self,
        user_id: int,
        quest_id: int,
        new_value: int
    ) -> Optional[tuple]:
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫–≤–µ—Å—Ç–∞
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            quest_id: ID –∫–≤–µ—Å—Ç–∞
            new_value: –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            
        Returns:
            Optional[tuple]: –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–≤–µ—Å—Ç –∏–ª–∏ None
        """
        async with aiosqlite.connect(self.db_path) as db:
            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            cursor = await db.execute(
                'SELECT target_value FROM quests WHERE quest_id = ? AND user_id = ?',
                (quest_id, user_id)
            )
            result = await cursor.fetchone()
            
            if not result:
                return None
            
            target_value = result[0]
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–ª–µ–≤—ã–º
            if new_value > target_value:
                new_value = target_value
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
            await db.execute(
                'UPDATE quests SET current_value = ? WHERE quest_id = ? AND user_id = ?',
                (new_value, quest_id, user_id)
            )
            
            # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ —Ü–µ–ª–∏ - –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
            if new_value >= target_value:
                await db.execute(
                    'UPDATE quests SET completed = TRUE WHERE quest_id = ? AND user_id = ?',
                    (quest_id, user_id)
                )
            
            await db.commit()
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–≤–µ—Å—Ç
            cursor = await db.execute(
                'SELECT * FROM quests WHERE quest_id = ? AND user_id = ?',
                (quest_id, user_id)
            )
            quest = await cursor.fetchone()
            logger.info(f"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–≤–µ—Å—Ç–∞ {quest_id} –æ–±–Ω–æ–≤–ª–µ–Ω: {new_value}/{target_value}")
            return quest
    
    async def complete_quest(self, user_id: int, quest_id: int) -> Optional[tuple]:
        """
        –û—Ç–º–µ—Ç–∏—Ç—å –∫–≤–µ—Å—Ç –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            quest_id: ID –∫–≤–µ—Å—Ç–∞
            
        Returns:
            Optional[tuple]: –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–≤–µ—Å—Ç –∏–ª–∏ None
        """
        async with aiosqlite.connect(self.db_path) as db:
            await db.execute(
                'UPDATE quests SET completed = TRUE, current_value = target_value WHERE quest_id = ? AND user_id = ?',
                (quest_id, user_id)
            )
            await db.commit()
            
            cursor = await db.execute(
                'SELECT quest_id, user_id, title, quest_type, target_value, current_value, completed, deadline, comment, created_at, has_date, has_time '
                'FROM quests WHERE quest_id = ? AND user_id = ?',
                (quest_id, user_id)
            )
            quest = await cursor.fetchone()
            logger.info(f"‚úÖ –ö–≤–µ—Å—Ç {quest_id} –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
            return quest
    
    async def delete_quest(self, user_id: int, quest_id: int) -> bool:
        """
        –£–¥–∞–ª–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            quest_id: ID –∫–≤–µ—Å—Ç–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ –∫–≤–µ—Å—Ç —É–¥–∞–ª–µ–Ω
        """
        async with aiosqlite.connect(self.db_path) as db:
            cursor = await db.execute(
                'DELETE FROM quests WHERE quest_id = ? AND user_id = ?',
                (quest_id, user_id)
            )
            await db.commit()
            deleted = cursor.rowcount > 0
            if deleted:
                logger.info(f"üóëÔ∏è –ö–≤–µ—Å—Ç {quest_id} —É–¥–∞–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
            return deleted
    
    async def update_quest(
        self,
        user_id: int,
        quest_id: int,
        title: Optional[str] = None,
        target_value: Optional[int] = None,
        deadline: Optional[str] = None,
        comment: Optional[str] = None
    ) -> Tuple[Optional[tuple], Optional[str]]:
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–≤–µ—Å—Ç–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            quest_id: ID –∫–≤–µ—Å—Ç–∞
            title: –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            target_value: –ù–æ–≤–æ–µ —Ü–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            deadline: –ù–æ–≤—ã–π –¥–µ–¥–ª–∞–π–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            comment: –ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            Tuple[Optional[tuple], Optional[str]]: (–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–≤–µ—Å—Ç, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ)
        """
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
        if title is not None:
            is_valid, error_msg = self.validate_input(title, "–ù–∞–∑–≤–∞–Ω–∏–µ")
            if not is_valid:
                return None, error_msg
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        if comment is not None:
            is_valid, error_msg = self.validate_input(comment, "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
            if not is_valid:
                return None, error_msg
        
        updates = []
        params = []
        
        if title is not None:
            updates.append('title = ?')
            params.append(title)
        if target_value is not None:
            updates.append('target_value = ?')
            params.append(target_value)
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ deadline: –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –æ–∑–Ω–∞—á–∞–µ—Ç –æ—á–∏—Å—Ç–∫—É –ø–æ–ª—è (NULL)
        if deadline is not None:
            if isinstance(deadline, str):
                dstr = deadline.strip()
                if dstr == "":
                    updates.append('deadline = NULL')
                else:
                    # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –¥–∞—Ç–∞, –ø—Ä–∏–≤–æ–¥–∏–º –∫ 'YYYY-MM-DD 00:00:00'
                    if re.fullmatch(r"\d{4}-\d{2}-\d{2}$", dstr):
                        dstr = f"{dstr} 00:00:00"
                    updates.append('deadline = ?')
                    params.append(dstr)
            else:
                updates.append('deadline = ?')
                params.append(deadline)
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ comment: –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –æ–∑–Ω–∞—á–∞–µ—Ç –æ—á–∏—Å—Ç–∫—É –ø–æ–ª—è (NULL) –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞—Ç–æ–ø–æ–¥–æ–±–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        if comment is not None:
            if isinstance(comment, str):
                c = comment.strip()
                if c == "":
                    updates.append('comment = NULL')
                else:
                    date_like = [
                        r"^\d{4}-\d{2}-\d{2}$",
                        r"^\d{4}-\d{2}-\d{2} \d{2}:\d{2}$",
                        r"^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$",
                        r"^\d{2}\.\d{2}\.\d{2}$",
                        r"^\d{2}\.\d{2}\.\d{2} \d{2}:\d{2}$",
                    ]
                    if any(re.fullmatch(p, c) for p in date_like):
                        updates.append('comment = NULL')
                    else:
                        updates.append('comment = ?')
                        params.append(c)
            else:
                updates.append('comment = ?')
                params.append(comment)
        logger.info(f"[DB] update_quest -> quest_id={quest_id}, user_id={user_id}, updates={updates}, params={params}")
        
        if not updates:
            return None, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"
        
        params.extend([quest_id, user_id])
        query = f'UPDATE quests SET {", ".join(updates)} WHERE quest_id = ? AND user_id = ?'
        
        try:
            async with aiosqlite.connect(self.db_path) as db:
                await db.execute(query, params)
                await db.commit()
                
                cursor = await db.execute(
                    'SELECT quest_id, user_id, title, quest_type, target_value, current_value, completed, deadline, comment, created_at, has_date, has_time '
                    'FROM quests WHERE quest_id = ? AND user_id = ?',
                    (quest_id, user_id)
                )
                quest = await cursor.fetchone()
                logger.info(f"‚úèÔ∏è –ö–≤–µ—Å—Ç {quest_id} –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
                return quest, None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–≤–µ—Å—Ç–∞: {e}")
            return None, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–≤–µ—Å—Ç–∞"
    
    async def get_quests_with_deadlines(self) -> List[tuple]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–≤–µ—Å—Ç–æ–≤ —Å –¥–µ–¥–ª–∞–π–Ω–∞–º–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        
        Returns:
            List[tuple]: –°–ø–∏—Å–æ–∫ –∫–≤–µ—Å—Ç–æ–≤ —Å –¥–µ–¥–ª–∞–π–Ω–∞–º–∏
        """
        async with aiosqlite.connect(self.db_path) as db:
            cursor = await db.execute(
                'SELECT quest_id, user_id, title, quest_type, target_value, current_value, completed, deadline, comment, created_at, has_date, has_time '
                'FROM quests WHERE deadline IS NOT NULL AND completed = FALSE'
            )
            quests = await cursor.fetchall()
            return quests


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()

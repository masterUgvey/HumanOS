import os
import logging
import asyncio
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from reminder import ReminderSystem
from database import Database

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
db = Database()

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –æ—à–∏–±–∫–∏
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ß–∏—Ç–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv('BOT_TOKEN')
if not TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å —Ñ–∞–π–ª .env")

# –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    db.add_user(user.id, user.first_name)
    
    keyboard = [
        [InlineKeyboardButton("üìã –ú–æ–∏ –∫–≤–µ—Å—Ç—ã", callback_data="my_quests")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    welcome_text = f"""
–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üöÄ

–Ø ‚Äî —Ç–≤–æ–π –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –Ω–∞ –ø—É—Ç–∏ –∫ –°–≤–µ—Ä—Ö—á–µ–ª–æ–≤–µ–∫—É. 
–í–º–µ—Å—Ç–µ –º—ã –ø—Ä–µ–≤—Ä–∞—Ç–∏–º —Ä—É—Ç–∏–Ω—É –≤ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—É—é –∏–≥—Ä—É!

–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:
    """
    
    await update.message.reply_text(welcome_text, reply_markup=reply_markup)

# –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """
    –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
    /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
    /help - –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É
    """
    await update.message.reply_text(help_text)

async def handle_all_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "").strip()

    # 1) –ß–∞—Å—Ç–∏—á–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
    if context.user_data.get("awaiting_partial_progress"):
        import re
        m = re.search(r"\d+", text)
        if not m:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ. –ü—Ä–∏–º–µ—Ä: 10")
            return
        delta = int(m.group(0))
        quest_id = context.user_data.get("partial_progress_quest_id")
        if not quest_id:
            await update.message.reply_text("–ö–æ–Ω—Ç–µ–∫—Å—Ç —É—Ç–µ—Ä—è–Ω. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–≤–µ—Å—Ç–∞.")
            context.user_data["awaiting_partial_progress"] = False
            return

        user_id = update.effective_user.id
        quest = db.update_quest_progress(user_id, quest_id, delta)
        if not quest:
            await update.message.reply_text("–ö–≤–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            context.user_data["awaiting_partial_progress"] = False
            context.user_data.pop("partial_progress_quest_id", None)
            return

        if quest[5] >= quest[4]:
            db.complete_quest(user_id, quest_id)

        context.user_data["awaiting_partial_progress"] = False
        context.user_data.pop("partial_progress_quest_id", None)

        await update.message.reply_text("–ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±–Ω–æ–≤–ª—ë–Ω! ‚úÖ")

        # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–≤–µ—Å—Ç–æ–≤
        quests = db.get_user_quests(user_id)
        if not quests:
            list_text = "üìã –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤!\n\n–ù–∞–∂–º–∏ '–°–æ–∑–¥–∞—Ç—å –∫–≤–µ—Å—Ç' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å."
            keyboard = [
                [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –∫–≤–µ—Å—Ç", callback_data="create_quest")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")],
            ]
        else:
            list_text = "üìã –¢–≤–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–≤–µ—Å—Ç—ã:\n\n"
            keyboard = []
            for q in quests:
                qid = q[0]
                deadline_info = ""
                if len(q) > 7 and q[7]:
                    from datetime import datetime
                    try:
                        # –ü—Ä–æ–±—É–µ–º –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞ - —Å –≤—Ä–µ–º–µ–Ω–µ–º –∏ –±–µ–∑
                        try:
                            d = datetime.strptime(q[7], "%Y-%m-%d %H:%M:%S")
                        except ValueError:
                            d = datetime.strptime(q[7], "%Y-%m-%d")
                        deadline_info = f" üìÖ {d.strftime('%d.%m.%Y %H:%M')}" if d.hour != 0 or d.minute != 0 else f" üìÖ {d.strftime('%d.%m.%Y')}"
                    except Exception:
                        pass
                list_text += f"‚Ä¢ {q[2]} ({q[5]}/{q[4]}){deadline_info}\n"
                keyboard.append([InlineKeyboardButton(f"–û—Ç–∫—Ä—ã—Ç—å: {q[2]}", callback_data=f"quest_{qid}")])
            keyboard.append([InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –∫–≤–µ—Å—Ç", callback_data="create_quest")])
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])

        await update.message.reply_text(list_text, reply_markup=InlineKeyboardMarkup(keyboard))
        return

    # 2) –í–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–≤–µ—Å—Ç–∞
    elif context.user_data.get("awaiting_quest_title"):
        if not text:
            await update.message.reply_text("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–≤–µ—Å—Ç–∞:")
            return
        context.user_data["quest_title"] = text
        context.user_data["awaiting_quest_title"] = False
        context.user_data["awaiting_target_value"] = True
        await update.message.reply_text(
            "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ —Ü–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 50 –¥–ª—è –æ—Ç–∂–∏–º–∞–Ω–∏–π, 30 –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü):"
        )
        return

    # 3) –í–≤–æ–¥ —Ü–µ–ª–µ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    elif context.user_data.get("awaiting_target_value"):
        import re
        m = re.search(r"\d+", text)
        if not m:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —á–∏—Å–ª–æ. –ü—Ä–∏–º–µ—Ä: 50")
            return
        target_value = int(m.group(0))

        quest_type = context.user_data.get("quest_type")
        quest_title = context.user_data.get("quest_title")
        if not quest_type or not quest_title:
            context.user_data["awaiting_target_value"] = False
            await update.message.reply_text("–ö–æ–Ω—Ç–µ–∫—Å—Ç —É—Ç–µ—Ä—è–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /start")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞ (–¥–µ–¥–ª–∞–π–Ω)
        context.user_data["target_value"] = target_value
        context.user_data["awaiting_target_value"] = False
        context.user_data["awaiting_deadline"] = True
        await update.message.reply_text(
            "–•–æ—á–µ—à—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω –¥–ª—è –∫–≤–µ—Å—Ç–∞?\n"
            "–§–æ—Ä–º–∞—Ç—ã:\n"
            "‚Ä¢ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.12.2024)\n"
            "‚Ä¢ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.12.2024 18:30)\n"
            "‚Ä¢ –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å '–Ω–µ—Ç' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
        )
        return

    # 4) –í–≤–æ–¥ –¥–µ–¥–ª–∞–π–Ω–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    elif context.user_data.get("awaiting_deadline"):
        user_input = (update.message.text or "").strip().lower()
        if user_input in {"–Ω–µ—Ç", "no", "skip"}:
            deadline = None
            deadline_text = "–±–µ–∑ –¥–µ–¥–ª–∞–π–Ω–∞"
        else:
            try:
                from datetime import datetime, timedelta
                user_input = user_input.replace('/', '.').replace('-', '.')
                if len(user_input.split('.')) == 3 and len(user_input.split('.')[2]) == 4:
                    deadline_date = datetime.strptime(user_input, "%d.%m.%Y")
                elif ' ' in user_input and ':' in user_input:
                    date_part, time_part = user_input.split(' ', 1)
                    deadline_date = datetime.strptime(f"{date_part} {time_part}", "%d.%m.%Y %H:%M")
                else:
                    raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")

                if deadline_date < datetime.now():
                    await update.message.reply_text(
                        "‚ùå –ù–µ–ª—å–∑—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É!\n"
                        "–í–≤–µ–¥–∏ –±—É–¥—É—â—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n"
                        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å '–Ω–µ—Ç' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
                    )
                    return

                deadline = deadline_date.strftime("%Y-%m-%d %H:%M:%S")
                deadline_text = deadline_date.strftime("%d.%m.%Y %H:%M")
            except ValueError:
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π:\n"
                    "‚Ä¢ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.12.2024)\n"
                    "‚Ä¢ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.12.2024 18:30)\n"
                    "‚Ä¢ –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å '–Ω–µ—Ç' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
                )
                return

        quest_type = context.user_data.get("quest_type")
        quest_title = context.user_data.get("quest_title")
        target_value = context.user_data.get("target_value")
        if not quest_type or not quest_title or target_value is None:
            context.user_data.clear()
            await update.message.reply_text("–ö–æ–Ω—Ç–µ–∫—Å—Ç —É—Ç–µ—Ä—è–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /start")
            return

        user_id = update.effective_user.id
        db.create_quest(user_id=user_id, title=quest_title, quest_type=quest_type, target_value=target_value, deadline=deadline)

        # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
        context.user_data.clear()

        await update.message.reply_text(f"üéØ –ö–≤–µ—Å—Ç '{quest_title}' —Å–æ–∑–¥–∞–Ω! {deadline_text}")

        # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–≤–µ—Å—Ç–æ–≤
        quests = db.get_user_quests(user_id)
        if not quests:
            list_text = "üìã –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤!\n\n–ù–∞–∂–º–∏ '–°–æ–∑–¥–∞—Ç—å –∫–≤–µ—Å—Ç' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å."
            keyboard = [
                [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –∫–≤–µ—Å—Ç", callback_data="create_quest")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")],
            ]
        else:
            list_text = "üìã –¢–≤–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–≤–µ—Å—Ç—ã:\n\n"
            keyboard = []
            for q in quests:
                qid = q[0]
                deadline_info = ""
                if len(q) > 7 and q[7]:
                    from datetime import datetime
                    try:
                        # –ü—Ä–æ–±—É–µ–º –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞ - —Å –≤—Ä–µ–º–µ–Ω–µ–º –∏ –±–µ–∑
                        try:
                            d = datetime.strptime(q[7], "%Y-%m-%d %H:%M:%S")
                        except ValueError:
                            d = datetime.strptime(q[7], "%Y-%m-%d")
                        deadline_info = f" üìÖ {d.strftime('%d.%m.%Y %H:%M')}" if d.hour != 0 or d.minute != 0 else f" üìÖ {d.strftime('%d.%m.%Y')}"
                    except Exception:
                        pass
                list_text += f"‚Ä¢ {q[2]} ({q[5]}/{q[4]}){deadline_info}\n"
                keyboard.append([InlineKeyboardButton(f"–û—Ç–∫—Ä—ã—Ç—å: {q[2]}", callback_data=f"quest_{qid}")])
            keyboard.append([InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –∫–≤–µ—Å—Ç", callback_data="create_quest")])
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])

        await update.message.reply_text(list_text, reply_markup=InlineKeyboardMarkup(keyboard))
        return

    # 5) –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
    else:
        response = f"–¢—ã –Ω–∞–ø–∏—Å–∞–ª: '{text}'. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."
        await update.message.reply_text(response)

# –§—É–Ω–∫—Ü–∏–∏-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è callback_data
async def handle_my_quests(query, context):
    user_id = query.from_user.id
    quests = db.get_user_quests(user_id)
    
    if not quests:
        text = "üìã –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤!\n\n–ù–∞–∂–º–∏ '–°–æ–∑–¥–∞—Ç—å –∫–≤–µ—Å—Ç' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å."
        keyboard = [
            [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –∫–≤–µ—Å—Ç", callback_data="create_quest")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
    else:
        text = "üìã –¢–≤–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–≤–µ—Å—Ç—ã:\n\n"
        keyboard = []
        for quest in quests:
            qid = quest[0]
            deadline_info = ""
            if len(quest) > 7 and quest[7]:
                from datetime import datetime
                try:
                    # –ü—Ä–æ–±—É–µ–º –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞
                    try:
                        d = datetime.strptime(quest[7], "%Y-%m-%d %H:%M:%S")
                    except ValueError:
                        d = datetime.strptime(quest[7], "%Y-%m-%d")
                    deadline_info = f" üìÖ {d.strftime('%d.%m.%Y %H:%M')}" if d.hour != 0 or d.minute != 0 else f" üìÖ {d.strftime('%d.%m.%Y')}"
                except Exception:
                    pass
            text += f"‚Ä¢ {quest[2]} ({quest[5]}/{quest[4]}){deadline_info}\n"
            keyboard.append([InlineKeyboardButton(f"–û—Ç–∫—Ä—ã—Ç—å: {quest[2]}", callback_data=f"quest_{qid}")])
        keyboard.append([InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –∫–≤–µ—Å—Ç", callback_data="create_quest")])
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text, reply_markup=reply_markup)

async def handle_stats(query, context):
    await query.edit_message_text("üìä –†–∞–∑–¥–µ–ª '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")

async def handle_help(query, context):
    await query.edit_message_text("‚ùì –†–∞–∑–¥–µ–ª '–ü–æ–º–æ—â—å' –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")

async def handle_create_quest(query, context):
    context.user_data["creating_quest"] = True
    context.user_data.pop("awaiting_quest_name", None)
    context.user_data.pop("awaiting_quest_title", None)
    context.user_data.pop("awaiting_target_value", None)
    context.user_data.pop("new_quest_type", None)
    context.user_data.pop("new_quest_title", None)
    context.user_data.pop("quest_title", None)
    
    text = (
        "–í—ã–±–µ—Ä–∏ —Ç–∏–ø –∫–≤–µ—Å—Ç–∞:\n\n"
        "- üí™ –§–∏–∑–∏—á–µ—Å–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è\n"
        "- üìö –ß—Ç–µ–Ω–∏–µ\n"
        "- üß† –ú–µ–¥–∏—Ç–∞—Ü–∏—è\n"
        "- üéØ –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞"
    )
    keyboard = [
        [InlineKeyboardButton("üí™ –§–∏–∑–∏—á–µ—Å–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è", callback_data="quest_type_physical")],
        [InlineKeyboardButton("üìö –ß—Ç–µ–Ω–∏–µ", callback_data="quest_type_reading")],
        [InlineKeyboardButton("üß† –ú–µ–¥–∏—Ç–∞—Ü–∏—è", callback_data="quest_type_meditation")],
        [InlineKeyboardButton("üéØ –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞", callback_data="quest_type_custom")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="my_quests")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text, reply_markup=reply_markup)

async def handle_quest_progress(query, context):
    user_id = query.from_user.id
    try:
        quest_id = int(query.data.rsplit("_", 1)[1])
    except Exception:
        await query.edit_message_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–≤–µ—Å—Ç–∞")
        return

    context.user_data["awaiting_partial_progress"] = True
    context.user_data["partial_progress_quest_id"] = quest_id
    await query.edit_message_text("–í–≤–µ–¥–∏ –≤–µ–ª–∏—á–∏–Ω—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10):")

async def handle_quest_complete(query, context):
    user_id = query.from_user.id
    try:
        quest_id = int(query.data.rsplit("_", 1)[1])
    except Exception:
        await query.edit_message_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–≤–µ—Å—Ç–∞")
        return

    quest = db.complete_quest(user_id, quest_id)
    if not quest:
        await query.edit_message_text("–ö–≤–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    await query.edit_message_text("–ö–≤–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω! ‚úÖ", reply_markup=InlineKeyboardMarkup([
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="my_quests")]
    ]))

async def handle_quest_detail(query, context):
    user_id = query.from_user.id
    try:
        quest_id = int(query.data.split("_", 1)[1])
    except Exception:
        await query.edit_message_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–≤–µ—Å—Ç–∞")
        return

    quest = db.get_quest(user_id, quest_id)
    if not quest:
        await query.edit_message_text("–ö–≤–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    title = quest[2]
    quest_type = quest[3]
    target_value = quest[4]
    current_value = quest[5]
    completed = bool(quest[6])

    status = "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω" if completed else "‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ"
    text = (
        f"üè∑Ô∏è {title}\n"
        f"–¢–∏–ø: {quest_type}\n"
        f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {current_value}/{target_value}\n"
        f"–°—Ç–∞—Ç—É—Å: {status}"
    )

    if len(quest) > 7 and quest[7]:
        from datetime import datetime
        try:
            try:
                d = datetime.strptime(quest[7], "%Y-%m-%d %H:%M:%S")
            except ValueError:
                d = datetime.strptime(quest[7], "%Y-%m-%d")
            text += f"\n–î–µ–¥–ª–∞–π–Ω: {d.strftime('%d.%m.%Y %H:%M')}" if d.hour != 0 or d.minute != 0 else f"\n–î–µ–¥–ª–∞–π–Ω: {d.strftime('%d.%m.%Y')}"
        except Exception:
            pass

    keyboard = []
    if not completed:
        keyboard.append([InlineKeyboardButton("‚ûï –ß–∞—Å—Ç–∏—á–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data=f"quest_progress_{quest_id}")])
        keyboard.append([InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"quest_complete_{quest_id}")])
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="my_quests")])

    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

async def handle_quest_type(query, context):
    type_map = {
        "quest_type_physical": "physical",
        "quest_type_reading": "reading",
        "quest_type_meditation": "meditation",
        "quest_type_custom": "custom",
    }
    context.user_data["quest_type"] = type_map.get(query.data, "custom")
    context.user_data["awaiting_quest_title"] = True
    await query.edit_message_text(
        "–û—Ç–ª–∏—á–Ω–æ! –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–≤–µ—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n–ù–∞–ø—Ä–∏–º–µ—Ä: '–£—Ç—Ä–µ–Ω–Ω—è—è –ø—Ä–æ–±–µ–∂–∫–∞', '–ß–∏—Ç–∞—Ç—å 20 –º–∏–Ω—É—Ç'"
    )

async def handle_back_to_main(query, context):
    keyboard = [
        [InlineKeyboardButton("üìã –ú–æ–∏ –∫–≤–µ—Å—Ç—ã", callback_data="my_quests")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

# –ì–ª–∞–≤–Ω–∞—è callback —Ñ—É–Ω–∫—Ü–∏—è
async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    # –°–ª–æ–≤–∞—Ä—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö callback_data
    handlers = {
        "my_quests": handle_my_quests,
        "stats": handle_stats,
        "help": handle_help,
        "create_quest": handle_create_quest,
        "back_to_main": handle_back_to_main
    }
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ —Å –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏
    if query.data.startswith("quest_progress_"):
        await handle_quest_progress(query, context)
    elif query.data.startswith("quest_complete_"):
        await handle_quest_complete(query, context)
    elif query.data.startswith("quest_") and query.data.split("_", 1)[1].isdigit():
        await handle_quest_detail(query, context)
    elif query.data in {"quest_type_physical", "quest_type_reading", "quest_type_meditation", "quest_type_custom"}:
        await handle_quest_type(query, context)
    # –û–±—ã—á–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
    elif query.data in handlers:
        await handlers[query.data](query, context)
    else:
        await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –≥–¥–µ –≤—Å–µ —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è
def main():
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–¥–∞–µ–º –µ–º—É —Ç–æ–∫–µ–Ω
    application = Application.builder().token(TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))

    # –ï–¥–∏–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_all_messages))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è INLINE-–ö–ù–û–ü–û–ö
    application.add_handler(CallbackQueryHandler(button_callback))

    # –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ —Ñ–æ–Ω–µ
    async def run_reminders():
        reminder = ReminderSystem()
        while True:
            try:
                sent = await reminder.check_deadlines()
                if sent > 0:
                    logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
                await asyncio.sleep(60)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
                await asyncio.sleep(300)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–µ
    loop = asyncio.get_event_loop()
    loop.create_task(run_reminders())

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == '__main__':
    main()
import logging
import asyncio
from datetime import datetime, timedelta
from typing import Dict, Set

class ReminderSystem:
    def __init__(self, bot, database):
        self.bot = bot
        self.database = database
        self.sent_reminders: Dict[int, Set[str]] = {}  # quest_id -> set of reminder types sent
        self.is_running = False

    async def start(self):
        """–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        self.is_running = True
        logging.info("–°–∏—Å—Ç–µ–º–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–ø—É—â–µ–Ω–∞")
        await self.check_reminders_loop()

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        self.is_running = False
        logging.info("–°–∏—Å—Ç–µ–º–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

    async def check_reminders_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        while self.is_running:
            try:
                await self.check_and_send_reminders()
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
            await asyncio.sleep(300)

    async def check_and_send_reminders(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        quests = self.database.get_quests_with_deadlines()
        now = datetime.now()

        for quest in quests:
            quest_id = quest[0]
            user_id = quest[1]
            title = quest[2]
            deadline_str = quest[7]

            if not deadline_str:
                continue

            try:
                # –ü–∞—Ä—Å–∏–º –¥–µ–¥–ª–∞–π–Ω
                try:
                    deadline = datetime.strptime(deadline_str, "%Y-%m-%d %H:%M:%S")
                except ValueError:
                    deadline = datetime.strptime(deadline_str, "%Y-%m-%d")
                    deadline = deadline.replace(hour=23, minute=59, second=59)

                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —ç—Ç–æ–≥–æ –∫–≤–µ—Å—Ç–∞
                if quest_id not in self.sent_reminders:
                    self.sent_reminders[quest_id] = set()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                time_until_deadline = deadline - now

                # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ –¥–µ–Ω—å –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞ (–µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π)
                deadline_date = deadline.date()
                today_date = now.date()

                # –ï—Å–ª–∏ –¥–µ–¥–ª–∞–π–Ω —Å–µ–≥–æ–¥–Ω—è
                if deadline_date == today_date:
                    # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ —á–∞—Å –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞
                    if timedelta(minutes=55) <= time_until_deadline <= timedelta(hours=1, minutes=5):
                        if "hour_before" not in self.sent_reminders[quest_id]:
                            await self.send_reminder(user_id, title, "–∑–∞ —á–∞—Å –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞", deadline)
                            self.sent_reminders[quest_id].add("hour_before")

                # –ï—Å–ª–∏ –¥–µ–¥–ª–∞–π–Ω –∑–∞–≤—Ç—Ä–∞
                elif deadline_date == (today_date + timedelta(days=1)):
                    # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ –¥–µ–Ω—å
                    if "day_before" not in self.sent_reminders[quest_id]:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–µ –¥–Ω—è –¥–µ–¥–ª–∞–π–Ω–∞ (—Å 00:00 –¥–æ 01:00)
                        if now.hour == 0:
                            await self.send_reminder(user_id, title, "–∑–∞ –¥–µ–Ω—å –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞", deadline)
                            self.sent_reminders[quest_id].add("day_before")

                # –ï—Å–ª–∏ –∫–≤–µ—Å—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω, —É–¥–∞–ª—è–µ–º –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
                if time_until_deadline < timedelta(0):
                    if quest_id in self.sent_reminders:
                        del self.sent_reminders[quest_id]

            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∫–≤–µ—Å—Ç–∞ {quest_id}: {e}")

    async def send_reminder(self, user_id, quest_title, reminder_type, deadline):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            deadline_str = deadline.strftime("%d.%m.%Y %H:%M") if deadline.hour != 0 or deadline.minute != 0 else deadline.strftime("%d.%m.%Y")
            message = f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {reminder_type}!\n\nüéØ –ö–≤–µ—Å—Ç: {quest_title}\nüìÖ –î–µ–¥–ª–∞–π–Ω: {deadline_str}"

            await self.bot.send_message(chat_id=user_id, text=message)
            logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –¥–ª—è –∫–≤–µ—Å—Ç–∞ '{quest_title}'")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")



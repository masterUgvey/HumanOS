"""
–ú–æ–¥—É–ª—å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Windsurf AI
–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –∫ AI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–≤–µ—Å—Ç–æ–≤ –∏ –∑–∞–¥–∞—á –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–µ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""

import aiohttp
import json
from typing import Optional, Dict, Any
from loguru import logger
from config import config


class WindsurfAIClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Windsurf AI API"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
        self.api_url = config.WINDSURF_API_URL
        self.api_key = config.WINDSURF_API_KEY
        self.timeout = aiohttp.ClientTimeout(total=30)
    
    async def generate_quest(self, user_goal: str) -> Optional[Dict[str, Any]]:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–≤–µ—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Windsurf AI
        
        Args:
            user_goal: –¶–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–•–æ—á—É –ø–æ—Ö—É–¥–µ—Ç—å –Ω–∞ 5 –∫–≥")
            
        Returns:
            Optional[Dict[str, Any]]: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–≤–µ—Å—Ç–∞ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
            –§–æ—Ä–º–∞—Ç: {
                "title": "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–≤–µ—Å—Ç–∞",
                "quest_type": "physical/intellectual/mental/custom",
                "target_value": 100,
                "description": "–û–ø–∏—Å–∞–Ω–∏–µ –∫–≤–µ—Å—Ç–∞",
                "tips": ["–°–æ–≤–µ—Ç 1", "–°–æ–≤–µ—Ç 2"]
            }
        """
        if not self.api_key:
            logger.warning("‚ö†Ô∏è API –∫–ª—é—á Windsurf AI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return None
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º—Ç –¥–ª—è AI
        prompt = f"""
–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Ü–µ–ª–µ–π –∏ —Å–æ–∑–¥–∞–Ω–∏—é –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏—Ö –∫–≤–µ—Å—Ç–æ–≤.

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç: {user_goal}

–°–æ–∑–¥–∞–π –¥–ª—è –Ω–µ–≥–æ –∫–≤–µ—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –ø–æ–ª—è–º–∏:
- title: –∫—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–≤–µ—Å—Ç–∞ (–¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤)
- quest_type: —Ç–∏–ø –∫–≤–µ—Å—Ç–∞ (physical –¥–ª—è —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á, intellectual –¥–ª—è –æ–±—É—á–µ–Ω–∏—è, mental –¥–ª—è –ø—Ä–∏–≤—ã—á–µ–∫, custom –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω–æ–≥–æ)
- target_value: —Ü–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–¥–ª—è physical/intellectual - –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ, –¥–ª—è mental/custom - –≤—Å–µ–≥–¥–∞ 100)
- description: –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–≤–µ—Å—Ç–∞ –∏ –∫–∞–∫ –µ–≥–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å (–¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤)
- tips: –º–∞—Å—Å–∏–≤ –∏–∑ 3-5 –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–≤–µ—Ç–æ–≤ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏

–û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.
"""
        
        try:
            headers = {
                "Content-Type": "application/json",
                "Authorization": f"Bearer {self.api_key}"
            }
            
            payload = {
                "model": "gpt-3.5-turbo",  # –ú–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å
                "messages": [
                    {
                        "role": "system",
                        "content": "–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏—Ö –∫–≤–µ—Å—Ç–æ–≤. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON."
                    },
                    {
                        "role": "user",
                        "content": prompt
                    }
                ],
                "temperature": 0.7,
                "max_tokens": 500
            }
            
            logger.info(f"ü§ñ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Windsurf AI: {user_goal[:50]}...")
            
            async with aiohttp.ClientSession(timeout=self.timeout) as session:
                async with session.post(self.api_url, headers=headers, json=payload) as response:
                    if response.status == 200:
                        data = await response.json()
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–≤–µ—Ç AI
                        ai_response = data.get("choices", [{}])[0].get("message", {}).get("content", "")
                        
                        # –ü–∞—Ä—Å–∏–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
                        quest_data = json.loads(ai_response)
                        
                        logger.info(f"‚úÖ –ö–≤–µ—Å—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω AI: {quest_data.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                        return quest_data
                    else:
                        error_text = await response.text()
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ API Windsurf AI ({response.status}): {error_text}")
                        return None
        
        except json.JSONDecodeError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç AI: {e}")
            return None
        except aiohttp.ClientError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Windsurf AI: {e}")
            return None
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å AI: {e}")
            return None
    
    async def get_motivation(self, quest_title: str, progress: int, target: int) -> Optional[str]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç AI –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫–≤–µ—Å—Ç–∞
        
        Args:
            quest_title: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–≤–µ—Å—Ç–∞
            progress: –¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
            target: –¶–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            
        Returns:
            Optional[str]: –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ None
        """
        if not self.api_key:
            return None
        
        progress_percent = (progress / target * 100) if target > 0 else 0
        
        prompt = f"""
–ö–≤–µ—Å—Ç: {quest_title}
–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress}/{target} ({progress_percent:.1f}%)

–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É—á–∏—Ç—ã–≤–∞—è –µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å.
–ï—Å–ª–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–∏–∑–∫–∏–π - –ø–æ–¥–±–æ–¥—Ä–∏. –ï—Å–ª–∏ –≤—ã—Å–æ–∫–∏–π - –ø–æ—Ö–≤–∞–ª–∏. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏.
"""
        
        try:
            headers = {
                "Content-Type": "application/json",
                "Authorization": f"Bearer {self.api_key}"
            }
            
            payload = {
                "model": "gpt-3.5-turbo",
                "messages": [
                    {"role": "system", "content": "–¢—ã ‚Äî –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ—É—á. –ü–∏—à–∏ –∫—Ä–∞—Ç–∫–æ –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ."},
                    {"role": "user", "content": prompt}
                ],
                "temperature": 0.8,
                "max_tokens": 100
            }
            
            async with aiohttp.ClientSession(timeout=self.timeout) as session:
                async with session.post(self.api_url, headers=headers, json=payload) as response:
                    if response.status == 200:
                        data = await response.json()
                        motivation = data.get("choices", [{}])[0].get("message", {}).get("content", "")
                        return motivation.strip()
                    else:
                        return None
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –æ—Ç AI: {e}")
            return None
    
    async def analyze_goal(self, goal_text: str) -> Optional[str]:
        """
        –ê–Ω–∞–ª–∏–∑ —Ü–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        
        Args:
            goal_text: –¢–µ–∫—Å—Ç —Ü–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            Optional[str]: –ê–Ω–∞–ª–∏–∑ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–ª–∏ None
        """
        if not self.api_key:
            return None
        
        prompt = f"""
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Å—Ç–∞–≤–∏–ª —Ü–µ–ª—å: {goal_text}

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç—É —Ü–µ–ª—å –∏ –¥–∞–π –∫—Ä–∞—Ç–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (–¥–æ 300 —Å–∏–º–≤–æ–ª–æ–≤):
1. –ù–∞—Å–∫–æ–ª—å–∫–æ —Ü–µ–ª—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞ –∏ –∏–∑–º–µ—Ä–∏–º–∞
2. –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞ –ª–∏ –æ–Ω–∞
3. –ö–∞–∫–∏–µ –ø–µ—Ä–≤—ã–µ —à–∞–≥–∏ —Å—Ç–æ–∏—Ç –ø—Ä–µ–¥–ø—Ä–∏–Ω—è—Ç—å

–û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É, –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è.
"""
        
        try:
            headers = {
                "Content-Type": "application/json",
                "Authorization": f"Bearer {self.api_key}"
            }
            
            payload = {
                "model": "gpt-3.5-turbo",
                "messages": [
                    {"role": "system", "content": "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Ü–µ–ª–µ–π –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é."},
                    {"role": "user", "content": prompt}
                ],
                "temperature": 0.7,
                "max_tokens": 300
            }
            
            async with aiohttp.ClientSession(timeout=self.timeout) as session:
                async with session.post(self.api_url, headers=headers, json=payload) as response:
                    if response.status == 200:
                        data = await response.json()
                        analysis = data.get("choices", [{}])[0].get("message", {}).get("content", "")
                        return analysis.strip()
                    else:
                        return None
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ü–µ–ª–∏ AI: {e}")
            return None


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞
ai_client = WindsurfAIClient()
